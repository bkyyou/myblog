(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{901:function(t,s,a){"use strict";a.r(s);var e=a(10),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_4-正则表达式问题整理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-正则表达式问题整理"}},[t._v("#")]),t._v(" 4.正则表达式问题整理")]),t._v(" "),s("p",[t._v("正则表达式的意思是使用单个字符串来描述、匹配一系列符合某个语句规则的字符串搜索模式。")]),t._v(" "),s("p",[t._v("字符串的正则方法有：match()、replace()、search()、split()")]),t._v(" "),s("p",[t._v("正则对象的方法有：exec（）、test（）")]),t._v(" "),s("h2",{attrs:{id:"_4-1-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-match"}},[t._v("#")]),t._v(" 4.1.match")]),t._v(" "),s("p",[t._v("功能：使用正则表达式模式对字符串执行查找，并将包含查找的结果作为数组返回")]),t._v(" "),s("p",[t._v("函数格式：stringObj.match(rgExp) stringObj为字符串必选 rgExp为正则表达式必选项")]),t._v(" "),s("p",[t._v("返回值：如果能匹配则返回结果数组，如果不能匹配返回null")]),t._v(" "),s("h2",{attrs:{id:"_4-2-replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-replace"}},[t._v("#")]),t._v(" 4.2.replace()")]),t._v(" "),s("p",[t._v("功能：用指定的字符串替换字符串中与正则表达式匹配的子字符串。")]),t._v(" "),s("p",[t._v("语法结构:")]),t._v(" "),s("p",[t._v("stringObject.replace(regexp,replacement)")]),t._v(" "),s("p",[t._v("返回值：是一个替换后的新字符串")]),t._v(" "),s("h2",{attrs:{id:"_4-3-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-search"}},[t._v("#")]),t._v(" 4.3.search()")]),t._v(" "),s("p",[t._v("功能：返回与正则表达式查找内容匹配的第一个子字符串的位置")]),t._v(" "),s("p",[t._v("语法：stringObj.search(regexp )")]),t._v(" "),s("p",[t._v("返回值：search 方法指明是否存在相应的匹配。如果找到一个匹配，search方法将返回一个整数值，指明这个匹配距离字符串开始的偏移位置。如果没有找到匹配，则返回 -1")]),t._v(" "),s("p",[t._v("注意：search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置。")]),t._v(" "),s("h2",{attrs:{id:"_4-4-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-split"}},[t._v("#")]),t._v(" 4.4.split()")]),t._v(" "),s("p",[t._v("split() 方法用于把一个字符串分割成字符串数组。")]),t._v(" "),s("p",[t._v("语法\nstringObject.split(separator,howmany)")]),t._v(" "),s("p",[t._v("参数 描述")]),t._v(" "),s("p",[t._v("separator 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。")]),t._v(" "),s("p",[t._v("howmany 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。")]),t._v(" "),s("p",[t._v("返回值")]),t._v(" "),s("p",[t._v("一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。\n但是，如果 separator 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）")]),t._v(" "),s("h2",{attrs:{id:"_4-5-exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-exec"}},[t._v("#")]),t._v(" 4.5.exec（）")]),t._v(" "),s("p",[t._v("语法结构:")]),t._v(" "),s("p",[t._v("RegExpObject.exec(string)")]),t._v(" "),s("p",[t._v("正则表达式exec()函数:")]),t._v(" "),s("p",[t._v("exec() 方法用于检索字符串中的正则表达式的匹配。")]),t._v(" "),s("p",[t._v("返回值是一个数组，但是此数组的内容和正则对象是否是全局匹配有着很大关系：")]),t._v(" "),s("p",[t._v("1.没有g修饰符:")]),t._v(" "),s("p",[t._v("在非全局匹配模式下，此函数的作用和match()函数是一样的，只能够在字符串中匹配一次，如果没有找到匹配的字符串，那么返回null，否则将返回一个数组，数组的第0个元素存储的是匹配字符串，第1个元素存放的是第一个引用型分组(子表达式)匹配的字符串，第2个元素存放的是第二个引用型分组(子表达式)匹配的字符串，依次类推。同时此数组还包括两个对象属性，index属性声明的是匹配字符串的起始字符在要匹配的完整字符串中的位置，input属性声明的是对要匹配的完整字符串的引用。")]),t._v(" "),s("p",[t._v("特别说明:")]),t._v(" "),s("p",[t._v("在非全局匹配模式下，IE浏览器还会具有lastIndex属性，不过这时是只读的。")]),t._v(" "),s("p",[t._v("2.具有g修饰符:")]),t._v(" "),s("p",[t._v("在全局匹配模式下，此函数返回值同样是一个数组，并且也只能够在字符串中匹配一次。不过此时，此函数一般会和lastIndex属性匹配使用，此函数会在lastIndex属性指定的字符处开始检索字符串，当exec()找到与表达式相匹配的字符串时，在匹配后，它将lastIndex 属性设置为匹配字符串的最后一个字符的下一个位置。可以通过反复调用exec()函数遍历字符串中的所有匹配，当exec()函数再也找不到匹配的文本时，它将返回null，并把lastIndex 属性重置为0。")]),t._v(" "),s("p",[t._v("数组的内容结构和没有g修饰符时完全相同。")]),t._v(" "),s("p",[t._v("特别说明:")]),t._v(" "),s("p",[t._v("如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把lastIndex属性重置为0。")]),t._v(" "),s("h2",{attrs:{id:"_4-6-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-test"}},[t._v("#")]),t._v(" 4.6.test()")]),t._v(" "),s("p",[t._v("用于检测一个字符串是否匹配某个模式.")]),t._v(" "),s("p",[t._v("返回一个 Boolean 值，它指出在被查找的字符串中是否匹配给出的正则表达式。")]),t._v(" "),s("p",[t._v("regexp.test(str)")]),t._v(" "),s("ul",[s("li",[t._v("正则匹配注意要点")])]),t._v(" "),s("p",[t._v("正则表达式test()，正则加g和不加g的区别")]),t._v(" "),s("p",[t._v("问题如下：3在正则测试时为false")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("g表示全文查找。而且在正则表达式内部有一个"),s("strong",[t._v("lastIndex")]),t._v("来记录匹配的位置，第一次调用reg后，那么lastIndex就不再等于0，当下次在调用该方法的时候，字符串的匹配会从lastIndex位置进行匹配,所以因为lastIndex的变化匹配str内的数字是跳着匹配的，只要去掉g就可以了")]),t._v(" "),s("h2",{attrs:{id:"_4-7-正则匹配分组时加不加g-是否全局搜索-的match结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-正则匹配分组时加不加g-是否全局搜索-的match结果"}},[t._v("#")]),t._v(" 4.7.正则匹配分组时加不加g(是否全局搜索)的match结果")]),t._v(" "),s("p",[t._v('有()分组不设置g时，匹配第一个整体符合正则规则的字符串，返回结果数组第一个值“2010-01-9”，并且可以分别匹配出每一个分组的值从数组下第二个值开始,["2010","01","9"];')]),t._v(" "),s("p",[t._v("有()分组且设置g时，匹配所有符合正则规则的字符串，返回结果[“2010-01-9”,“2011-9-8”];")]),t._v(" "),s("p",[t._v("无()分组不设置g时，匹配第一个整体符合正则规则的字符串，返回结果[“2010-01-9”];")]),t._v(" "),s("p",[t._v("无()分组且设置g时，匹配所有符合正则规则的字符串，返回结果[“2010-01-9”,“2011-9-8”];")]),t._v(" "),s("h2",{attrs:{id:"_4-8-exec-从字符串中提取-每次只能匹配一组数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-exec-从字符串中提取-每次只能匹配一组数据"}},[t._v("#")]),t._v(" 4.8.exec 从字符串中提取（每次只能匹配一组数据）")]),t._v(" "),s("p",[t._v("如果想全部匹配  可以加g，需要多次执行exec。（参照第一个问题说到的lastIndex）")]),t._v(" "),s("p",[t._v("如果正则中有分组，使用/g可以匹配出所有符合正则规则的字符串，且内部有分组")]),t._v(" "),s("p",[t._v("参考： https://www.cnblogs.com/fangsmile/p/14251949.html")])])}),[],!1,null,null,null);s.default=r.exports}}]);