(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{867:function(s,e,n){"use strict";n.r(e);var t=n(10),a=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"_1-介绍babel的使用presets和plugins的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍babel的使用presets和plugins的概念"}},[s._v("#")]),s._v(" 1.介绍babel的使用presets和plugins的概念")]),s._v(" "),e("h2",{attrs:{id:"_1-1-babel-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-babel-是什么"}},[s._v("#")]),s._v(" 1.1.Babel 是什么")]),s._v(" "),e("p",[s._v("Bebal 可以帮助我们将新 JS 语法编译为可执行且兼容旧浏览器版本的一款编译工具。")]),s._v(" "),e("p",[s._v("举个例子，ES6（编译前）：")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fn")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),e("p",[s._v("ES5（编译后）：")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fn")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("h2",{attrs:{id:"_1-2-babel-的应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-babel-的应用场景"}},[s._v("#")]),s._v(" 1.2.Babel 的应用场景")]),s._v(" "),e("p",[s._v('想体验新 JS 语法带来的便捷和可读性，又希望能够向下兼容？Babel 可以帮你做到。\n不仅如此，Babel 还支持解析 TS、JSX 等多种语法，给 ES6/7/8/9 Typescript、React / Vue3 JSX 等"语法糖"带来无限的可能。')]),s._v(" "),e("h2",{attrs:{id:"_1-3-babel-的核心包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-babel-的核心包"}},[s._v("#")]),s._v(" 1.3.Babel 的核心包")]),s._v(" "),e("p",[s._v("@babel/core 是 Babel 的编译核心工具。")]),s._v(" "),e("p",[s._v("@babel/cli 是 Babel 提供的脚手架。")]),s._v(" "),e("p",[s._v("@babel/preset-env 集成了各种 plugin 插件。")]),s._v(" "),e("h2",{attrs:{id:"_1-4-预设-presets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-预设-presets"}},[s._v("#")]),s._v(" 1.4.预设 presets")]),s._v(" "),e("p",[s._v("presets 是 多个 plugins 的集合")]),s._v(" "),e("p",[s._v("使用的时候需要安装对应的插件，对应 babel-preset-xxx，例如下面的配置，需要 npm install babel-preset-es2015。")]),s._v(" "),e("p",[s._v('{"presets": ["es2015"]}\nenv')]),s._v(" "),e("p",[s._v('{"presets": ["env", options]}\n最近新增的一个选项，有以下 options 选择。')]),s._v(" "),e("p",[s._v("targets: { [string]: number }，默认 {}，需要支持的环境，可选例如：chrome, edge, firefox, safari, ie, ios, node，甚至可以制定版本，如 node: 6.5。也使用 node: current 代表使用当前的版本。\nbrowsers: Array | string，默认 []，浏览器列表，使用的是 browserslist，可选例如：last 2 versions, > 5%。\nloose: boolean，默认 false，是否使用宽松模式，如果设置为 true，plugins 里的插件如果允许，都会采用宽松模式。\ndebug: boolean，默认 false，编译是否会去掉 console.log。\nwhitelist: Array，默认 []，设置一直引入的 plugins 列表。\nes2015/es2016/es2017/latest")]),s._v(" "),e("p",[s._v('{"presets": ["es2015"]}\nes2015\n使用 es2015 的，也就是我们常说的 es6 的相关方法，简单翻译如下，更多细节可以参看文档。')]),s._v(" "),e("p",[s._v("check-es2015-constants // 检验const常量是否被重新赋值\ntransform-es2015-arrow-functions // 编译箭头函数\ntransform-es2015-block-scoped-functions // 函数声明在作用域内\ntransform-es2015-block-scoping // 编译const和let\ntransform-es2015-classes // 编译class\ntransform-es2015-computed-properties // 编译计算对象属性\ntransform-es2015-destructuring // 编译解构赋值\ntransform-es2015-duplicate-keys // 编译对象中重复的key，其实是转换成计算对象属性\ntransform-es2015-for-of // 编译for…of\ntransform-es2015-function-name // 将function.name语义应用于所有的function\ntransform-es2015-literals // 编译整数(8进制/16进制)和unicode\ntransform-es2015-modules-commonjs // 将modules编译成commonjs\ntransform-es2015-object-super // 编译super\ntransform-es2015-parameters // 编译参数，包括默认参数，不定参数和解构参数\ntransform-es2015-shorthand-properties // 编译属性缩写\ntransform-es2015-spread // 编译展开运算符\ntransform-es2015-sticky-regex // 正则添加sticky属性\ntransform-es2015-template-literals // 编译模版字符串\ntransform-es2015-typeof-symbol // 编译Symbol类型\ntransform-es2015-unicode-regex // 正则添加unicode模式\ntransform-regenerator // 编译generator函数\n总结：常用的都覆盖了，并不需要太关心内容，如果使用某些还不支持的语法导致报错，可以回头查一下支持的列表。")]),s._v(" "),e("p",[s._v("es2016\n使用 es2016 的相关插件，也就是 es7，更多细节可以参看文档。")]),s._v(" "),e("p",[s._v("transform-exponentiation-operator // 编译幂运算符\nes2017\n使用 es2017 的相关插件，也就是 es8？，更多细节可以参看文档。")]),s._v(" "),e("p",[s._v("syntax-trailing-function-commas // function最后一个参数允许使用逗号\ntransform-async-to-generator // 把async函数转化成generator函数\nlatest\nlatest 是一个特殊的 presets，包括了 es2015，es2016，es2017 的插件（目前为止，以后有 es2018 也会包括进去）。")]),s._v(" "),e("p",[s._v("react\nreact 是一个比较特别的官方推荐的 presets，大概是因为比较火吧。加入了 flow，jsx 等语法，具体可以看文档。")]),s._v(" "),e("p",[s._v("stage-x（stage-0/1/2/3/4）\nstage-x 和上面的 es2015 等有些类似，但是它是按照 JavaScript 的提案阶段区分的，一共有5个阶段。而数字越小，阶段越靠后，存在依赖关系。也就是说 stage-0 是包括stage-1 的，以此类推。")]),s._v(" "),e("p",[s._v("stage-4\n已完成的提案，与年度发布的 release 有关，包含2015年到明年正式发布的内容。例如，现在是2016年，stage-4 应该是包括 es2015，es2016，es2017。经过测试，babel-preset-stage-4 这个 npm 包是不存在的，如果你单纯的需要stage-4的相关方法，需要引入 es2015~es2017 的 presets。")]),s._v(" "),e("p",[s._v("stage-3\n除了 stage-4 的内容，还包括以下插件，更多细节请看文档。")]),s._v(" "),e("p",[s._v("transform-object-rest-spread // 编译对象的解构赋值和不定参数\ntransform-async-generator-functions // 将 async generator function 和 for await 编译为 es2015 的 generator。\nstage-2\n除了stage-3的内容，还包括以下插件，更多细节请看文档。")]),s._v(" "),e("p",[s._v("transform-class-properties // 编译静态属性(es2015)和属性初始化语法声明的属性(es2016)。\nstage-1\n除了 stage-2 的内容，还包括以下插件，更多细节请看文档。")]),s._v(" "),e("p",[s._v("transform-class-constructor-call // 编译 class 中的 constructor，在 Babel7 中会被移除\ntransform-export-extensions // 编译额外的 exprt 语法，如 export * as ns from “mod”; 细节可以看这个\nstage-0\n除了 stage-1 的内容，还包括以下插件，更多细节请看文档。")]),s._v(" "),e("p",[s._v("transform-do-expressions // 编译 do 表达式\ntransform-function-bind // 编译 bind 运算符，也就是 ::\n插件 plugins\n其实看了上面的应该也明白了，presets，也就是一堆 plugins 的预设，起到方便的作用。如果你不采用 presets，完全可以单独引入某个功能，比如以下的设置就会引入编译箭头函数的功能。")]),s._v(" "),e("p",[s._v('{"plugins": ["transform-es2015-arrow-functions"]}\n那么，还有一些方法是 presets 中不提供的，这时候就需要单独引入了，介绍几个常见的插件。')]),s._v(" "),e("p",[s._v('transform-runtime\n{"plugins": ["transform-runtime", options]}\n主要有以下 options 选择。')]),s._v(" "),e("p",[s._v("helpers: boolean，默认 true，使用 babel 的 helper 函数。\npolyfill: boolean，默认 true，使用 babel 的 polyfill，但是不能完全取代 babel-polyfill。\nregenerator: boolean，默认 true，使用 babel 的 regenerator。\nmoduleName: string，默认 babel-runtime，使用对应 module 处理。\n这里的 options 一般不用自己设置，用默认的即可。这个插件最大的作用主要有几下几点：")]),s._v(" "),e("p",[s._v("解决编译中产生的重复的工具函数，减小代码体积\n非实例方法的 poly-fill，如 Object.assign，但是实例方法不支持，如 ”foobar”.includes(“foo”)，这时候需要单独引入 babel-polyfill\n更多细节参见文档。")]),s._v(" "),e("p",[s._v('transform-remove-console\n{"plugins": ["transform-remove-console"]}\n使用这个插件，编译后的代码都会移除 console.*，妈妈再也不用担心线上代码有多余的 console.log 了。当然很多时候，我们如果使用 webpack，会在 webpack 中配置。')]),s._v(" "),e("p",[s._v("这也告诉我们，Babel 不仅仅是编译代码的工具，还能对代码进行压缩，也许有一天，你不再需要代码压缩的插件了，因为你有了Babel！")]),s._v(" "),e("p",[s._v("自定义预设或插件\nBabel支持自定义的预设 presets 或插件 plugins。如果你的插件在 npm 上，可以直接采用这种方式 ”plugins”: [“babel-plugin-myPlugin”]，当然，你也可以缩写，它和 ”plugins”: [“myPlugin”] 是等价的。此外，你还可以采用本地的相对路径引入插件，比如 ”plugins”: [“./node_modules/asdf/plugin”]。")]),s._v(" "),e("p",[s._v("presets 同理。")]),s._v(" "),e("p",[s._v("plugins/presets 排序\n也许你会问，或者你没注意到，我帮你问了，plugins 和 presets 编译，也许会有相同的功能，或者有联系的功能，按照怎么的顺序进行编译？答案是会按照一定的顺序。")]),s._v(" "),e("p",[s._v("具体而言，plugins 优先于 presets 进行编译。\nplugins 按照数组的 index 增序(从数组第一个到最后一个)进行编译。\npresets 按照数组的 index 倒序(从数组最后一个到第一个)进行编译。因为作者认为大部分会把 presets 写成 [“es2015”, “stage-0”]。具体细节可以看这个。\n总结\n因为自己对 .babelrc 文件的设置有点疑问，花了大半天撸了下官方的文档。很多内容是英文的，可能翻译并不准确，希望大家多多指教。")]),s._v(" "),e("p",[s._v('{"presets": ["es2015","stage-0"],"plugins": ["transform-runtime"]}\n这是我写了半天发现比较推荐的配置（真的是太简单了，还花了这么久去看文档）。强烈推荐使用 transform-runtime。')]),s._v(" "),e("p",[s._v("当然，如果你的项目需要 react 或者 flow 这些语法的编译，请在 presets 里加入对应的值即可。如果你需要非实例方法 ”foobar”.includes(“foo”) 之类的方法，按需引入 babel-polyfill。")]),s._v(" "),e("ul",[e("li",[s._v("参考：")])]),s._v(" "),e("p",[s._v("https://blog.csdn.net/cookcyq__/article/details/131256924")]),s._v(" "),e("p",[s._v("https://baijiahao.baidu.com/s?id=1756895380417333127&wfr=spider&for=pc")])])}),[],!1,null,null,null);e.default=a.exports}}]);