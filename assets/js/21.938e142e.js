(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{553:function(t,a,s){t.exports=s.p+"assets/img/5.1.e08d829e.jpg"},554:function(t,a,s){t.exports=s.p+"assets/img/5.2.899f916f.jpg"},555:function(t,a,s){t.exports=s.p+"assets/img/5.3.3df36067.jpg"},556:function(t,a,s){t.exports=s.p+"assets/img/5.4.4947af0d.jpg"},765:function(t,a,s){"use strict";s.r(a);var r=s(29),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"_5-docker镜像讲解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-docker镜像讲解"}},[t._v("#")]),t._v(" 5.docker镜像讲解")]),t._v(" "),r("h2",{attrs:{id:"镜像是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#镜像是什么"}},[t._v("#")]),t._v(" 镜像是什么")]),t._v(" "),r("p",[t._v("镜像是一个轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码，运行时，库，环境变量和配置文件")]),t._v(" "),r("p",[t._v("所有的应用，直接打包 docker 镜像，就可以直接跑起来")]),t._v(" "),r("h3",{attrs:{id:"如何得到镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何得到镜像"}},[t._v("#")]),t._v(" 如何得到镜像")]),t._v(" "),r("ul",[r("li",[t._v("从远程仓库下载")]),t._v(" "),r("li",[t._v("朋友拷贝")]),t._v(" "),r("li",[t._v("自己制作一个镜像 DockerFile")])]),t._v(" "),r("h2",{attrs:{id:"docker-镜像原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像原理"}},[t._v("#")]),t._v(" docker 镜像原理")]),t._v(" "),r("p",[r("img",{attrs:{src:s(553),alt:"docker 镜像原理"}})]),t._v(" "),r("h3",{attrs:{id:"docker-镜像加载原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像加载原理"}},[t._v("#")]),t._v(" docker 镜像加载原理")]),t._v(" "),r("p",[r("img",{attrs:{src:s(554),alt:"docker 镜像加载原理"}})]),t._v(" "),r("h3",{attrs:{id:"分层理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分层理解"}},[t._v("#")]),t._v(" 分层理解")]),t._v(" "),r("p",[r("img",{attrs:{src:s(555),alt:"分层理解"}})]),t._v(" "),r("p",[t._v("TODO 需要重新看一遍")]),t._v(" "),r("h2",{attrs:{id:"特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),r("p",[t._v("Docker 的镜像都是只读的，当容器启动时，一个可写层被加载到镜像顶部，这一层就是通常所说的容器层，容器之下都叫镜像层")]),t._v(" "),r("p",[r("img",{attrs:{src:s(556),alt:"特点图示"}})]),t._v(" "),r("h2",{attrs:{id:"commit-镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commit-镜像"}},[t._v("#")]),t._v(" commit 镜像")]),t._v(" "),r("p",[t._v("docker commit   提交容器成为一个新的副本")]),t._v(" "),r("p",[t._v("docker commit -m='提交描述信息' -a='作者' 容器id 目标镜像名:[TAG]")]),t._v(" "),r("h3",{attrs:{id:"实战测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实战测试"}},[t._v("#")]),t._v(" 实战测试")]),t._v(" "),r("p",[t._v("启动默认的tomcat， 发现这个默认的tomcat是没有webapps应用的，是镜像的原因，官方的镜像默认 webapps 是没有文件的，可以自己拷贝进去")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('docker run -it -p 8080:8080 tomcat\n\ndocker exec -it e6debf8740bf /bin/bash\n\ncp -r webapps.dist/* webapps\n\n# 将我们操作过的一个容器通过commit提交为一个镜像！我们以后就使用我们修改过的镜像即可， 这就是我们自己的一个修改的镜像\ndocker commit -a="bkyyou" -m="add webapps应用" e6debf8740bf tomcat02:1.0\n')])])]),r("blockquote",[r("p",[t._v("如果你想要保存当前容器的状态，就可以通过 commit 来提交，获得一个镜像，就好比 vm 的快照。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);