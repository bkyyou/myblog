(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{529:function(s,t,a){s.exports=a.p+"assets/img/1.1.a9e8fef3.png"},530:function(s,t,a){s.exports=a.p+"assets/img/1.2.df4794e9.png"},531:function(s,t,a){s.exports=a.p+"assets/img/1.3.85d6389d.png"},897:function(s,t,a){"use strict";a.r(t);var l=a(10),e=Object(l.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_1-使用linux背后shell概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用linux背后shell概念"}},[s._v("#")]),s._v(" 1.使用linux背后shell概念")]),s._v(" "),t("h2",{attrs:{id:"_1-1-shell的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-shell的作用"}},[s._v("#")]),s._v(" 1.1.shell的作用")]),s._v(" "),t("ol",[t("li",[s._v("解释执行用户输入的命令或程序等。")]),s._v(" "),t("li",[s._v("用户输入一条命令，shell就解释一条")]),s._v(" "),t("li",[s._v("键盘输入命令，linux给与响应的方式，称之为交互式")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(529),alt:"shell位置层"}})]),s._v(" "),t("p",[s._v("shell是一块包裹着核心的壳，处于操作系统的最外层，与用户直接对话，把用户的输入解释给操作系统，然后操作系统的输入结果，输入到屏幕给与用户看到结果")]),s._v(" "),t("p",[s._v("从我们登录 linux ， 输入账号到进入 linux 交互式界面，所有的操作，都是交给 shell 解释并执行")]),s._v(" "),t("p",[t("img",{attrs:{src:a(530),alt:"shell位置层"}})]),s._v(" "),t("p",[s._v("我们想要获取计算机的数据，不可能每次都编写程序，编译后在运行，得到想要的数据，例如你想要找到一个文件，可以先写一点c语言代码，然后调用系统函数， 通过 gcc 编译后，运行程序才能找到文件")]),s._v(" "),t("p",[s._v("因此有大牛开发出了 shell 解释器，能够让我们方便使用 Linux，例如只要敲下 ls -lh 这样的字符串，shell 解释器就会针对这句话解释，解释成 ls -l -h 然后执行，通过终端输出结果，无论是图形化或是命令行界面")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 查找命令位置\nwhich vim  // /usr/bin/vim\nwhich ls  // /bin/ls\n")])])]),t("h2",{attrs:{id:"_1-2-什么是-shell-脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-什么是-shell-脚本"}},[s._v("#")]),s._v(" 1.2.什么是 shell 脚本")]),s._v(" "),t("p",[s._v("当命令或者程序程序语句写在文件中，我们执行文件，读取其中代码，这个程序文件就称之为 shell 脚本")]),s._v(" "),t("p",[s._v("在 shell 脚本里定义多条 Linux 命令以及循环控制语句，然后将这些 linux 命令一次性解释完毕，执行脚本文件称之为，非交互式方式")]),s._v(" "),t("ul",[t("li",[s._v("window 中存在 *.bat 批处理脚本")]),s._v(" "),t("li",[s._v("linux 中常用 *.sh 脚本文件")])]),s._v(" "),t("h3",{attrs:{id:"_1-2-1-shell脚本规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-shell脚本规则"}},[s._v("#")]),s._v(" 1.2.1.shell脚本规则")]),s._v(" "),t("p",[s._v("在 linux 系统中，shell脚本或者称之为 bash shell 程 通常都是 vim 编辑，由 linux 命令、bash shell 指令、逻辑控制语句和注释信息组成")]),s._v(" "),t("h3",{attrs:{id:"_1-2-2-shebang"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-shebang"}},[s._v("#")]),s._v(" 1.2.2.shebang")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// root@VM-0-4-centos\n// 是一个软件接 指向 bash\nls -l /bin/sh //  lrwxrwxrwx 1 root root 4 Aug  7  2020 /bin/sh -> bash\n")])])]),t("p",[s._v("在计算机程序中，shebang 指的是出现在文本文件的第一行前两个字符 #！")]),s._v(" "),t("p",[s._v("在 Unix 系统中，程序会分析 shebang 后面的内容，作为解释器的指令，例如")]),s._v(" "),t("ul",[t("li",[s._v("以 #!/bin/sh 开头的文件，程序在执行的时候会调用 /bin/sh, 也就是 bash解释器")]),s._v(" "),t("li",[s._v("以 #!/bin/bash 开头的文件， bash解释器")]),s._v(" "),t("li",[s._v("以 #!/usr/bin/python 开头的文件，指定 phthon 解释器去执行")]),s._v(" "),t("li",[s._v("以 #!/usr/bin/env 解释器名称， 是一种在不同平台上都能正确找到解释器的方法")])]),s._v(" "),t("p",[t("strong",[s._v("这样做的好处是，系统会自动在 PATH 环境变量中查找你指定的程序（本例中的bash）。相比第一种写法，你应该尽量用这种写法，因为程序的路径是不确定的。这样写还有一个好处，操作系统的PATH变量有可能被配置为指向程序的另一个版本。比如，安装完新版本的bash，我们可能将其路径添加到PATH中，来“隐藏”老版本。如果直接用#!/bin/bash，那么系统会选择老版本的bash来执行脚本，如果用#!/usr/bin/env bash，则会使用新版本。")])]),s._v(" "),t("h3",{attrs:{id:"_1-2-3-注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-注意事项"}},[s._v("#")]),s._v(" 1.2.3.注意事项")]),s._v(" "),t("ul",[t("li",[s._v("如果脚本未指定 shebang ，脚本执行的时候，默认用当前 shell 去解释脚本，即 $SHELL")]),s._v(" "),t("li",[s._v("如果 shebang 指定了可执行的解释器，如/bin/bash /usr/bin/python，脚本在执行时，文件名会作为参数传递给解释器")]),s._v(" "),t("li",[s._v('如果＃！指定的解释程序没有可执行权限，则会报错" bad interpreter : Permission denied"。')]),s._v(" "),t("li",[s._v("如果＃！指定的解释程序不是一个可执行文件，那么指定的解释程序会被忽略，转而交给当前的 SHELL 去执行这个脚本。")]),s._v(" "),t("li",[s._v('如果＃！指定的解释程序不存在，那么会报错" bad interpreter : No such file or directory"。')]),s._v(" "),t("li",[s._v("#！之后的解释程序，需要写其绝对路径（如：#!/bin/bash )，它是不会自动到 SPATH 中寻找解释器的。")]),s._v(" "),t("li",[s._v('如果你使用 "bash test.sh" 这样的命令来执行脚本，那么＃！这一行将会被忽略掉，解释器当然是用命令行中显式指定的 bash。')])]),s._v(" "),t("blockquote",[t("p",[s._v("命令行的语句都会去 PATH 里找")])]),s._v(" "),t("h2",{attrs:{id:"_1-3-sh脚本运行方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-sh脚本运行方法"}},[s._v("#")]),s._v(" 1.3.sh脚本运行方法")]),s._v(" "),t("ol",[t("li",[s._v("./test.sh")])]),s._v(" "),t("p",[s._v("需要加权限, 添加完权限就可以用 ./test.sh 执行")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// linux\nchmod +x ./test.sh\nchmod +x /usr/local/bin/abc\n// mac\nsudo chmod +x ./test.sh\nsudo chmod +x /usr/local/bin/abc\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("/bin/bash ./test.sh")]),s._v(" "),t("li",[s._v("/bin/sh ./test.sh")]),s._v(" "),t("li",[s._v("sh ./test.sh  bash ./test.sh")]),s._v(" "),t("li",[s._v("source ./test.sh 或者  . ./test.sh // source 等于 .")])]),s._v(" "),t("h2",{attrs:{id:"_1-4-shell和运维"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-shell和运维"}},[s._v("#")]),s._v(" 1.4.shell和运维")]),s._v(" "),t("p",[s._v("shell 脚本语言很适合处理纯文本类型数据，且 Linux 的哲学思想就是一切皆文本，如日志，配置文件，文本，网页文件，大多数都是纯文本类型，因此 shell 可以方便进行文本处理，好比 linux 三剑客(grep, sed, awk)")]),s._v(" "),t("p",[t("img",{attrs:{src:a(531),alt:"shell作用"}})]),s._v(" "),t("h2",{attrs:{id:"_1-5-脚本语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-脚本语言"}},[s._v("#")]),s._v(" 1.5.脚本语言")]),s._v(" "),t("p",[s._v("shell 脚本语言属于一种弱类型语言，无需声明变量类型，直接定义使用")]),s._v(" "),t("p",[s._v("强类型语言，必须先定义变量类型，确定是字符串或者数字等，之后再赋予相同类型的值")]),s._v(" "),t("p",[s._v("centos7系统中支持shell情况，有如下类型，只需要关心 bash， sh")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[root@VM-0-4-centos ~]# cat /etc/shells\n/bin/sh\n/bin/bash\n/usr/bin/sh\n/usr/bin/bash\n/bin/tcsh\n/bin/csh\n")])])]),t("p",[s._v("默认的 sh 解释器")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[root@VM-0-4-centos ~]# ll /usr/bin/sh\nlrwxrwxrwx 1 root root 4 Aug  7  2020 /usr/bin/sh -> bash\n")])])]),t("p",[s._v("Linux 默认 shell")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[root@VM-0-4-centos ~]# echo $SHELL\n/bin/bash\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);