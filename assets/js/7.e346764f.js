(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{353:function(r,t,o){r.exports=o.p+"assets/img/6.3.22713c6e.jpg"},519:function(r,t,o){r.exports=o.p+"assets/img/6.1.992ff3e0.jpg"},520:function(r,t,o){r.exports=o.p+"assets/img/6.2.c061b552.jpg"},521:function(r,t,o){r.exports=o.p+"assets/img/6.8.97851f3b.jpg"},522:function(r,t,o){r.exports=o.p+"assets/img/6.9.827b89c9.png"},523:function(r,t,o){r.exports=o.p+"assets/img/6.12.3ffc71eb.png"},524:function(r,t,o){r.exports=o.p+"assets/img/6.13.72772720.png"},525:function(r,t,o){r.exports=o.p+"assets/img/6.10.54ec939c.png"},526:function(r,t,o){r.exports=o.p+"assets/img/6.11.c2a289e5.png"},527:function(r,t,o){r.exports=o.p+"assets/img/6.14.a3f72ae7.png"},756:function(r,t,o){"use strict";o.r(t);var n=o(29),a=Object(n.a)({},(function(){var r=this,t=r.$createElement,n=r._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("h1",{attrs:{id:"_6-容器数据卷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-容器数据卷"}},[r._v("#")]),r._v(" 6.容器数据卷")]),r._v(" "),n("blockquote",[n("p",[r._v("之前都是入门，容器数据卷，Dockerfile，Docker网络才是精髓")])]),r._v(" "),n("h2",{attrs:{id:"docker-的理念回顾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-的理念回顾"}},[r._v("#")]),r._v(" docker 的理念回顾")]),r._v(" "),n("p",[r._v("将应用和环境打包成一个镜像")]),r._v(" "),n("p",[r._v("数据如果在一个容器中，如果删除容器，数据就会丢失！ 需求：数据可以持久化")]),r._v(" "),n("p",[r._v("mysql 容器删了数据没了！需求：mysql数据可以存在本地")]),r._v(" "),n("p",[r._v("容器之间可以有一个数据共享的技术！docker 容器产生的数据同步到本地。这就是卷技术，目录的挂载，将我们的容器目录挂载到 linux 上")]),r._v(" "),n("p",[n("img",{attrs:{src:o(519),alt:"卷技术图示"}})]),r._v(" "),n("p",[r._v("总结： 容器的持久化和同步操作，容器间也是可以数据共享的")]),r._v(" "),n("h2",{attrs:{id:"使用数据卷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用数据卷"}},[r._v("#")]),r._v(" 使用数据卷")]),r._v(" "),n("ul",[n("li",[n("ol",[n("li",[r._v("方式一：使用命令挂载")])])])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("# 端口映射\ndocker run -it -p 主机端口:容器内端口\n\n# 目录映射\ndocker run -it -v 主机目录:容器内目录\n")])])]),n("ul",[n("li",[r._v("1.1 测试")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("docker run -it -v /home/ceshi:/home centos /bin/bash\n")])])]),n("p",[r._v("docker inspect 容器id 来查询启动之后的详细信息\n"),n("img",{attrs:{src:o(520),alt:"是否挂载成功图示"}})]),r._v(" "),n("p",[n("img",{attrs:{src:o(353),alt:"测试文件的同步"}})]),r._v(" "),n("ul",[n("li",[r._v("反向操作也是可行的， 再测试")])]),r._v(" "),n("ol",[n("li",[r._v("停止容器")]),r._v(" "),n("li",[r._v("宿主机上修改文件")]),r._v(" "),n("li",[r._v("启动容器\ndocker start 容器id\n这个停止的容器id    docker ps -a")]),r._v(" "),n("li",[r._v("容器的数据依旧是同步的")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('"test.java" 1L, 19C written\n[root@VM-0-4-centos ceshi]# ll\ntotal 4\n-rw-r--r-- 1 root root 19 May 27 19:26 test.java\n[root@VM-0-4-centos ceshi]# ls\ntest.java\n[root@VM-0-4-centos ceshi]# docker ps\nCONTAINER ID   IMAGE                 COMMAND                  CREATED        STATUS        PORTS                                                                                  NAMES\ne6debf8740bf   tomcat                "catalina.sh run"        34 hours ago   Up 34 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp                                              hopeful_kowalevski\n07bf8d7bfbf7   portainer/portainer   "/portainer"             2 days ago     Up 2 days     0.0.0.0:8088->9000/tcp, :::8088->9000/tcp                                              epic_keldysh\n8d4a7b0a60b1   elasticsearch:7.6.2   "/usr/local/bin/dock…"   2 days ago     Up 2 days     0.0.0.0:9200->9200/tcp, :::9200->9200/tcp, 0.0.0.0:9300->9300/tcp, :::9300->9300/tcp   elasticsearch02\n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# docker start 9875dc1a4506\n9875dc1a4506\n[root@VM-0-4-centos ceshi]# docker ps\nCONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                                                                  NAMES\n9875dc1a4506   centos                "/bin/bash"              7 minutes ago   Up 2 seconds                                                                                          blissful_stonebraker\ne6debf8740bf   tomcat                "catalina.sh run"        34 hours ago    Up 34 hours    0.0.0.0:8080->8080/tcp, :::8080->8080/tcp                                              hopeful_kowalevski\n07bf8d7bfbf7   portainer/portainer   "/portainer"             2 days ago      Up 2 days      0.0.0.0:8088->9000/tcp, :::8088->9000/tcp                                              epic_keldysh\n8d4a7b0a60b1   elasticsearch:7.6.2   "/usr/local/bin/dock…"   2 days ago      Up 2 days      0.0.0.0:9200->9200/tcp, :::9200->9200/tcp, 0.0.0.0:9300->9300/tcp, :::9300->9300/tcp   elasticsearch02\n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# \n[root@VM-0-4-centos ceshi]# docker attach 9875dc1a4506\n[root@9875dc1a4506 /]# cd home/\n[root@9875dc1a4506 home]# ls\ntest.java\n[root@9875dc1a4506 home]# cat test.java \nhello,linux update\n[root@9875dc1a4506 home]# \n')])])]),n("p",[n("img",{attrs:{src:o(353),alt:"反向测试文件的同步"}})]),r._v(" "),n("ul",[n("li",[r._v("好处： 我们以后修改只需要在本地修改即可，容器内可以自动同步")])]),r._v(" "),n("h2",{attrs:{id:"实战-安装-mysql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战-安装-mysql"}},[r._v("#")]),r._v(" 实战： 安装 MySQL")]),r._v(" "),n("p",[r._v("思考： mysql 数据持久化的问题")]),r._v(" "),n("p",[r._v("mysql 默认是 3306 端口")]),r._v(" "),n("div",{staticClass:"language-s extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("# 获取镜像\n[root@VM-0-4-centos ~]# docker pull mysql:5.7\n\n# 运行容器，需要做数据挂载\n# 安装启动 mysql ，需要配置密码，这是要注意的\ndocker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n# -d 后台运行\n# -p 端口映射\n# -v 卷挂载\n# -e 环境配置\n# --name 配置名字\n\n# 启动成功之后，我们可以在本地使用 sqlyog 或者 navicat 连接测试一下\n# navicat 连接到服务器的3310 - 3310 和容器内的3306 映射\n\n# 在本地创建一个数据库，查看一下我们映射的路径是否ok\n\n# 进入容器\ndocker exec -it 9f32db909413 /bin/bash\n\n# 最后是进入MySQL命令行，就跟正常进入MySQL命令行一样：\nmysql -u root -p\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("docker ps -a\n")])])]),n("ul",[n("li",[r._v("官方测试命令")])]),r._v(" "),n("p",[r._v("$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag")]),r._v(" "),n("h3",{attrs:{id:"彻底删除容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#彻底删除容器"}},[r._v("#")]),r._v(" 彻底删除容器")]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("docker rm -f mysql01\n")])])]),n("p",[r._v("挂载到本地数据依旧没有丢失")]),r._v(" "),n("h3",{attrs:{id:"具名挂载-和-匿名挂载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具名挂载-和-匿名挂载"}},[r._v("#")]),r._v(" 具名挂载 和 匿名挂载")]),r._v(" "),n("h4",{attrs:{id:"匿名挂载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匿名挂载"}},[r._v("#")]),r._v(" 匿名挂载")]),r._v(" "),n("p",[r._v("-P   表示随机映射端口")]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("docker run -d -P --name nginx01 -v /etc/nginx nginx\n")])])]),n("ul",[n("li",[r._v("查看所有的卷的情况")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("## 查看卷信息\ndocker volume ls\n\nlocal     8257f65b5f07b993f8b7d69a83ad992c628f989edeb94631ae455041a0a49e62\n\n# 这里发现，这就是匿名挂载，我们在 -v 只写了容器内的路径，没有容器外的路径\n")])])]),n("h4",{attrs:{id:"具名挂载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具名挂载"}},[r._v("#")]),r._v(" 具名挂载")]),r._v(" "),n("div",{staticClass:"language-s extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('# 启动 ngxin\ndocker run -d -P --name nginx02 -v juming-nginx:/etc/nginx  nginx\n# juming-nginx 不是地址 加 / 表示地址\n\n[root@VM-0-4-centos home]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx  nginx\n07714059169e645399de4c5a78b9c5d73c71ef8683c8a88f252466711965cb1d\n[root@VM-0-4-centos home]# docker volume ls\nDRIVER    VOLUME NAME\nlocal     8257f65b5f07b993f8b7d69a83ad992c628f989edeb94631ae455041a0a49e62\nlocal     2619117434c999a1344d582478c0ef4be77956d51e0af7e411a6699ed6bd9147\nlocal     juming-nginx\n\n# 通过 -v 卷名:容器内路径\n\n# 查看卷信息\n[root@VM-0-4-centos home]# docker volume inspect juming-nginx\n[\n    {\n        "CreatedAt": "2021-05-27T20:47:45+08:00",\n        "Driver": "local",\n        "Labels": null,\n        "Mountpoint": "/var/lib/docker/volumes/juming-nginx/_data",\n        "Name": "juming-nginx",\n        "Options": null,\n        "Scope": "local"\n    }\n]\n# 表示地址 "Mountpoint": "/var/lib/docker/volumes/juming-nginx/_data"\n')])])]),n("blockquote",[n("p",[r._v("/var/lib/docker/    docker 的工作目录")])]),r._v(" "),n("p",[r._v("所有的 docker 容器内的卷，没有指定目录的情况下，都是在 ‘/var/lib/docker/volume/xxx/_data’ (xxx卷名)")]),r._v(" "),n("p",[r._v("我们通过具名挂载可以方便的找到我们的一个卷，大多数情况在使用 具名挂载")]),r._v(" "),n("h4",{attrs:{id:"如何确定是匿名挂载还是具名挂载-还是指定路径挂载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何确定是匿名挂载还是具名挂载-还是指定路径挂载"}},[r._v("#")]),r._v(" 如何确定是匿名挂载还是具名挂载，还是指定路径挂载")]),r._v(" "),n("p",[r._v("-v 容器内路径   匿名挂载")]),r._v(" "),n("p",[r._v("-v 卷名:容器内路径   具名挂载")]),r._v(" "),n("p",[r._v("-v /宿主机路径:容器内路径   指定路径挂载")]),r._v(" "),n("h4",{attrs:{id:"拓展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拓展"}},[r._v("#")]),r._v(" 拓展")]),r._v(" "),n("ul",[n("li",[r._v("通过 -v 容器内路径:ro rw 改变读写权限")])]),r._v(" "),n("p",[r._v("ro    readonly    只读")]),r._v(" "),n("p",[r._v("rw    readwrite   可读可写")]),r._v(" "),n("p",[r._v("ro  只要看到 ro 就说明这个路径只能通过宿主机来操作，容器内部无法修改")]),r._v(" "),n("blockquote",[n("p",[r._v("一旦设置了容器权限，容器对我们挂载出来的内容就有限定了")])]),r._v(" "),n("div",{staticClass:"language-s extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro  nginx\ndocker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw  nginx\n")])])]),n("h2",{attrs:{id:"数据卷容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据卷容器"}},[r._v("#")]),r._v(" 数据卷容器")]),r._v(" "),n("p",[r._v("多个 mysql 同步数据")]),r._v(" "),n("p",[n("img",{attrs:{src:o(521),alt:"数据卷容器"}})]),r._v(" "),n("h3",{attrs:{id:"测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[r._v("#")]),r._v(" 测试")]),r._v(" "),n("div",{staticClass:"language-s extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("# 启动镜像\ndocker run -it --name docker01 kuangshen/centos:1.0\n# 或者  写镜像名字需要写版本\ndocker run -it --name docker01 镜像id\n\n# 查看容器目录\n[root@f2330dddd733 /]# ls\nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01  volume02\n[root@f2330dddd733 /]# ls -l   \ntotal 56\nlrwxrwxrwx   1 root root    7 Nov  3  2020 bin -> usr/bin\ndrwxr-xr-x   5 root root  360 May 29 10:59 dev\ndrwxr-xr-x   1 root root 4096 May 29 10:59 etc\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 home\nlrwxrwxrwx   1 root root    7 Nov  3  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -> usr/lib64\ndrwx------   2 root root 4096 Dec  4 17:37 lost+found\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 media\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 mnt\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 opt\ndr-xr-xr-x 122 root root    0 May 29 10:59 proc\ndr-xr-x---   2 root root 4096 Dec  4 17:37 root\ndrwxr-xr-x  11 root root 4096 Dec  4 17:37 run\nlrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 srv\ndr-xr-xr-x  13 root root    0 May 27 02:10 sys\ndrwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp\ndrwxr-xr-x  12 root root 4096 Dec  4 17:37 usr\ndrwxr-xr-x  20 root root 4096 Dec  4 17:37 var\ndrwxr-xr-x   2 root root 4096 May 29 10:59 volume01\ndrwxr-xr-x   2 root root 4096 May 29 10:59 volume02\n[root@f2330dddd733 /]# \n")])])]),n("p",[n("img",{attrs:{src:o(522),alt:"查看容器docker01目录"}})]),r._v(" "),n("div",{staticClass:"language-s extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("[root@VM-0-4-centos ~]# docker run -it --name docker02 --volumes-from docker01 kuangshen/centos:1.0\n[root@a0ddf53f1f32 /]# ls -l\ntotal 56\nlrwxrwxrwx   1 root root    7 Nov  3  2020 bin -> usr/bin\ndrwxr-xr-x   5 root root  360 May 29 12:17 dev\ndrwxr-xr-x   1 root root 4096 May 29 12:17 etc\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 home\nlrwxrwxrwx   1 root root    7 Nov  3  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -> usr/lib64\ndrwx------   2 root root 4096 Dec  4 17:37 lost+found\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 media\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 mnt\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 opt\ndr-xr-xr-x 125 root root    0 May 29 12:17 proc\ndr-xr-x---   2 root root 4096 Dec  4 17:37 root\ndrwxr-xr-x  11 root root 4096 Dec  4 17:37 run\nlrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Nov  3  2020 srv\ndr-xr-xr-x  13 root root    0 May 27 02:10 sys\ndrwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp\ndrwxr-xr-x  12 root root 4096 Dec  4 17:37 usr\ndrwxr-xr-x  20 root root 4096 Dec  4 17:37 var\ndrwxr-xr-x   2 root root 4096 May 29 10:59 volume01\ndrwxr-xr-x   2 root root 4096 May 29 10:59 volume02\n")])])]),n("ul",[n("li",[r._v("新建 docker02 同步 docker01")])]),r._v(" "),n("p",[n("img",{attrs:{src:o(523),alt:"解释volumes-from"}})]),r._v(" "),n("p",[n("img",{attrs:{src:o(524),alt:"解释volumes-from"}})]),r._v(" "),n("p",[n("img",{attrs:{src:o(525),alt:"查看容器docker02"}})]),r._v(" "),n("ul",[n("li",[r._v("新建 docker03 同步 docker01")])]),r._v(" "),n("p",[n("img",{attrs:{src:o(526),alt:"查看容器docker01"}})]),r._v(" "),n("ul",[n("li",[r._v("测试：删除 docker01，查看docker02，docker03是否还可以访问文件")])]),r._v(" "),n("p",[r._v("测试依旧可以访问")]),r._v(" "),n("p",[n("img",{attrs:{src:o(527),alt:"容器卷是拷贝"}})]),r._v(" "),n("h3",{attrs:{id:"多个-mysql-实现数据共享"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个-mysql-实现数据共享"}},[r._v("#")]),r._v(" 多个 mysql 实现数据共享")]),r._v(" "),n("p",[r._v("实现两个容器数据同步")]),r._v(" "),n("div",{staticClass:"language-s extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("# 最开始写法\ndocker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n\n# 不指定 本地目录\ndocker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n\n# 启动 mysql02\ndocker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n")])])]),n("ul",[n("li",[r._v("结论")])]),r._v(" "),n("p",[r._v("容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止")]),r._v(" "),n("p",[r._v("但是一旦你持久到本地，这个时候，本地的数据是不会删除的")])])}),[],!1,null,null,null);t.default=a.exports}}]);