(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{352:function(e,t,a){e.exports=a.p+"assets/img/2.3.e2c6cb49.jpg"},508:function(e,t,a){e.exports=a.p+"assets/img/2.1.71635505.jpg"},509:function(e,t,a){e.exports=a.p+"assets/img/2.2.209d1e5b.jpg"},510:function(e,t,a){e.exports=a.p+"assets/img/2.4.e67f4398.jpg"},511:function(e,t,a){e.exports=a.p+"assets/img/2.5.9ebf7c1f.jpg"},512:function(e,t,a){e.exports=a.p+"assets/img/2.7.96b09bbf.jpg"},513:function(e,t,a){e.exports=a.p+"assets/img/2.8.a7ef7462.jpg"},752:function(e,t,a){"use strict";a.r(t);var r=a(29),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_2-docker基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker基础"}},[e._v("#")]),e._v(" 2.Docker基础")]),e._v(" "),r("h2",{attrs:{id:"dokcer概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dokcer概念"}},[e._v("#")]),e._v(" Dokcer概念")]),e._v(" "),r("p",[e._v("Docker 是基于 GO 语音开发的")]),e._v(" "),r("p",[e._v("官网： https://www.docker.com/")]),e._v(" "),r("p",[e._v("文档： https://www.docs.docker.com/  Docker的文档是超级详细的")]),e._v(" "),r("p",[e._v("仓库地址：https://hub.docker.com/")]),e._v(" "),r("h2",{attrs:{id:"docker作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker作用"}},[e._v("#")]),e._v(" Docker作用")]),e._v(" "),r("ol",[r("li",[e._v("更快速的交付和部署")])]),e._v(" "),r("p",[e._v("打包镜像，发布测试，一键部署")]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("更快捷的升级和扩容")])]),e._v(" "),r("p",[e._v("使用了docker之后，我们部署和应用就和搭积木一样")]),e._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[r("p",[e._v("更简单的系统运维")])]),e._v(" "),r("li",[r("p",[e._v("更高效的计算资源利用")])])]),e._v(" "),r("blockquote",[r("p",[e._v("Docker 是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例。服务器的性能可以充分使用")])]),e._v(" "),r("h3",{attrs:{id:"比较虚拟机技术不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比较虚拟机技术不同"}},[e._v("#")]),e._v(" 比较虚拟机技术不同")]),e._v(" "),r("ul",[r("li",[e._v("传统虚拟机， 虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件")]),e._v(" "),r("li",[e._v("容器内的应用，直接应用在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了")]),e._v(" "),r("li",[e._v("每个容器互相间隔，每个容器内都有属于自己的文件系统，互不影响")])]),e._v(" "),r("h2",{attrs:{id:"docker中的名次概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker中的名次概念"}},[e._v("#")]),e._v(" Docker中的名次概念")]),e._v(" "),r("h3",{attrs:{id:"docker-基础组成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-基础组成"}},[e._v("#")]),e._v(" Docker 基础组成")]),e._v(" "),r("h4",{attrs:{id:"客户端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[e._v("#")]),e._v(" 客户端")]),e._v(" "),r("p",[e._v("docker build")]),e._v(" "),r("p",[e._v("docker pull")]),e._v(" "),r("p",[e._v("docker run")]),e._v(" "),r("h4",{attrs:{id:"服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务器"}},[e._v("#")]),e._v(" 服务器")]),e._v(" "),r("h4",{attrs:{id:"仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#仓库"}},[e._v("#")]),e._v(" 仓库")]),e._v(" "),r("h3",{attrs:{id:"名次概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#名次概念"}},[e._v("#")]),e._v(" 名次概念")]),e._v(" "),r("h4",{attrs:{id:"镜像-image"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#镜像-image"}},[e._v("#")]),e._v(" 镜像(image)")]),e._v(" "),r("p",[e._v("镜像就好比是一个模版，可以通过这个模版来创建容器服务，tomcat镜像 ===> run ===> tomcat01(提供服务器)，通过这个镜像可以创建多个容器（最终服务运行或项目运行就是在一个容器中的）。")]),e._v(" "),r("h4",{attrs:{id:"容器-container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器-container"}},[e._v("#")]),e._v(" 容器(container)")]),e._v(" "),r("p",[e._v("Docker 可以利用容器技术，独立运行一个或者一组应用，通过镜像来创建的。")]),e._v(" "),r("p",[e._v("启动，停止，删除，基本命令。")]),e._v(" "),r("p",[e._v("目前就可以把这个容器看成简易的linux系统。")]),e._v(" "),r("h4",{attrs:{id:"仓库-repository"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#仓库-repository"}},[e._v("#")]),e._v(" 仓库(repository)")]),e._v(" "),r("p",[e._v("仓库就是存放镜像的地方。")]),e._v(" "),r("p",[e._v("仓库分为共有仓库，和私有仓库")]),e._v(" "),r("p",[e._v("Docker Hub（默认都是国外的）")]),e._v(" "),r("p",[e._v("阿里云...都有容器服务器（配置镜像加速）")]),e._v(" "),r("h2",{attrs:{id:"安装-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker"}},[e._v("#")]),e._v(" 安装 Docker")]),e._v(" "),r("p",[e._v("文档： https://docs.docker.com/engine/install/centos/")]),e._v(" "),r("h3",{attrs:{id:"环境准备"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#环境准备"}},[e._v("#")]),e._v(" 环境准备")]),e._v(" "),r("ul",[r("li",[e._v("需要一点linux的基础")]),e._v(" "),r("li",[e._v("CenOS 7")]),e._v(" "),r("li",[e._v("使用 Xshell连接远程服务器进行操作")])]),e._v(" "),r("h3",{attrs:{id:"环境查看"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#环境查看"}},[e._v("#")]),e._v(" 环境查看")]),e._v(" "),r("h3",{attrs:{id:"帮助文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#帮助文档"}},[e._v("#")]),e._v(" 帮助文档")]),e._v(" "),r("p",[e._v("https://docs.docker.com/engine/install/centos/")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# 1. 卸载旧版本\nyum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n# 2. 需要的安装包\nyum install -y yum-utils\n\n# 3. 设置仓库的镜像\nyum-config-manager \\\n  --add-repo \\\n  https://download.docker.com/linux/centos/docker-ce.repo // 文档默认是国外的，很慢， 要配置国内的\n\nyum-config-manager \\\n  --add-repo \\\n  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo // 推荐使用 阿里云的\n\n\n# 更新yum软件包索引\nyum makecache fast\n\n# 4. 安装 docker docker-ce 社区版， docker-ee 企业版\nyum install docker-ce docker-ce-cli containerd.io\n\n# 5. 启动 docker\nsystemctl start docker\n\n# 6. 使用 docker version 是否安装\n\n# 7. docker run hello-world\n\n# 8. 查看一下下载的 hello-world 镜像\ndocker images\n")])])]),r("h3",{attrs:{id:"了解-卸载-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#了解-卸载-docker"}},[e._v("#")]),e._v(" 了解 卸载 docker")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# 1. 卸载依赖\nyum remove docker-ce docker-ce-cli containerd.io\n\n# 2. 删除资源\nrm -rf /var/lib/docker\n\n# /var/lib/docker docker的默认工作路径\n")])])]),r("p",[e._v("搜索 docker 阿里云镜像地址")]),e._v(" "),r("h2",{attrs:{id:"配置阿里云镜像加速"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置阿里云镜像加速"}},[e._v("#")]),e._v(" 配置阿里云镜像加速")]),e._v(" "),r("ol",[r("li",[e._v("登陆阿里云找到容器服务")])]),e._v(" "),r("p",[r("img",{attrs:{src:a(508),alt:""}})]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("找到镜像加速地址")])]),e._v(" "),r("p",[r("img",{attrs:{src:a(509),alt:""}})]),e._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[e._v("配置使用")])]),e._v(" "),r("p",[e._v("https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('sudo mkdir -p /etc/docker\n\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  "registry-mirrors": ["https://pa55k8dt.mirror.aliyuncs.com"]\n}\nEOF\n\nsudo systemctl daemon-reload\n\nsudo systemctl restart docker\n')])])]),r("h2",{attrs:{id:"回顾-helloword-流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回顾-helloword-流程"}},[e._v("#")]),e._v(" 回顾 helloword 流程")]),e._v(" "),r("p",[e._v("docker run hello-world => docker会在本级寻找镜像 => 判断本机是否有这个镜像\n=> 有 => 使用这个镜像运行\n=> 否 => 去 DockerHub 上下载 => DockerHub是否可以找到 => 找不到返回错误，找到下载这个镜像到本地使用这个镜像运行")]),e._v(" "),r("p",[r("img",{attrs:{src:a(352),alt:"run流程分析图"}})]),e._v(" "),r("h2",{attrs:{id:"底层原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#底层原理"}},[e._v("#")]),e._v(" 底层原理")]),e._v(" "),r("h3",{attrs:{id:"docker-是怎么工作的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-是怎么工作的"}},[e._v("#")]),e._v(" Docker 是怎么工作的")]),e._v(" "),r("p",[e._v("Docker 是一个 Client-Sever 结构的系统， Docker 的守护进程运行在主机上，通过 socket 从客户端访问。")]),e._v(" "),r("p",[e._v("DockerSever 接收到 Docker-Client 的指令， 就会执行这个命令")]),e._v(" "),r("p",[r("img",{attrs:{src:a(510),alt:"Docker工作过程"}})]),e._v(" "),r("h2",{attrs:{id:"docker-为什么比虚拟机快"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-为什么比虚拟机快"}},[e._v("#")]),e._v(" Docker 为什么比虚拟机快")]),e._v(" "),r("ol",[r("li",[e._v("Docker 有着比虚拟机更少的抽象层")]),e._v(" "),r("li",[e._v("Docker 利用宿主机的内核，vm需要是 Guest OS.")])]),e._v(" "),r("p",[r("img",{attrs:{src:a(511),alt:"Docker 为什么比虚拟机快图解"}})]),e._v(" "),r("p",[e._v("所以说，新建一个容器的时候，docker 不需要向虚拟机一样重新加载一个操作系统内核，避免引导操作。虚拟机是加载 Guest OS，分钟级别的， 而 docker 是利用宿主机的操作系统，省略了复杂的过程，秒级。")]),e._v(" "),r("blockquote",[r("p",[e._v("之后学过所有的命令，再回头看这段理论，就会很清晰。")])]),e._v(" "),r("h2",{attrs:{id:"docker-常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-常用命令"}},[e._v("#")]),e._v(" Docker 常用命令")]),e._v(" "),r("h3",{attrs:{id:"帮助命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#帮助命令"}},[e._v("#")]),e._v(" 帮助命令")]),e._v(" "),r("ul",[r("li",[e._v("docker version  显示docker的版本信息")]),e._v(" "),r("li",[e._v("docker info     显示 docker 的系统信息，包括镜像和容器的数量")]),e._v(" "),r("li",[e._v("docker 命令 --help  万能命令  docker --help 帮助命令")])]),e._v(" "),r("h3",{attrs:{id:"帮助文档的地址"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#帮助文档的地址"}},[e._v("#")]),e._v(" 帮助文档的地址")]),e._v(" "),r("p",[e._v("https://docs.docker.com/reference/")]),e._v(" "),r("h3",{attrs:{id:"镜像命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[e._v("#")]),e._v(" 镜像命令")]),e._v(" "),r("ul",[r("li",[r("ol",[r("li",[e._v("docker images 查看所有本地主机上的镜像")])])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@VM-0-4-centos ~]# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nhello-world   latest    d1165f221234   2 months ago   13.3kB\n")])])]),r("ul",[r("li",[e._v("1.1 解释")])]),e._v(" "),r("p",[e._v("REPOSITORY 镜像的仓库源")]),e._v(" "),r("p",[e._v("TAG        镜像的标签")]),e._v(" "),r("p",[e._v("IMAGE ID   镜像的id")]),e._v(" "),r("p",[e._v("CREATED    镜像的创建时间")]),e._v(" "),r("p",[e._v("SIZE       镜像的大小")]),e._v(" "),r("ul",[r("li",[e._v("1.2 可选项")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" Options:\n -a, --all             Show all images (default hides intermediate images) 列出所有的镜像\n     --digests         Show digests\n -f, --filter filter   Filter output based on conditions provided\n     --format string   Pretty-print images using a Go template\n     --no-trunc        Don't truncate output\n -q, --quiet           Only show image IDs   只显示镜像的 id\n")])])]),r("ul",[r("li",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("docker search   搜索镜像")])])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker search mysql\nNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nmysql                             MySQL is a widely used, open-source relation…   10886     [OK]       \nmariadb                           MariaDB Server is a high performing open sou…   4104      [OK]       \nmysql/mysql-server                Optimized MySQL Server Docker images. Create…   809                  [OK]\ncentos/mysql-57-centos7           MySQL 5.7 SQL database server                   87     \n")])])]),r("ul",[r("li",[e._v("2.1 可选项， 通过搜索来过滤")])]),e._v(" "),r("p",[e._v("docker search mysql --filter=STARS=3000   搜索出来的镜像就是 STARS 大于 3000 的镜像")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@VM-0-4-centos ~]# docker search mysql --filter=STARS=3000\nNAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nmysql     MySQL is a widely used, open-source relation…   10886     [OK]       \nmariadb   MariaDB Server is a high performing open sou…   4104      [OK]\n")])])]),r("ul",[r("li",[r("ol",{attrs:{start:"3"}},[r("li",[e._v("docker pull 下载镜像")])])])]),e._v(" "),r("p",[e._v("docker pull 镜像名[:tag]")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# 下载镜像 \n[root@VM-0-4-centos ~]# docker pull mysql\nUsing default tag: latest       # 如果不写版本，默认就是 latest， 最新的\nlatest: Pulling from library/mysql\n69692152171a: Pull complete     # 分层下载， docker image 的核心，联合文件系统\n1651b0be3df3: Pull complete \n951da7386bc8: Pull complete \n0f86c95aa242: Pull complete \n37ba2d8bd4fe: Pull complete \n6d278bb05e94: Pull complete \n497efbd93a3e: Pull complete \nf7fddf10c2c2: Pull complete \n16415d159dfb: Pull complete \n0e530ffc6b73: Pull complete \nb0a4a1a77178: Pull complete \ncd90f92aa9ef: Pull complete \nDigest: sha256:d50098d7fcb25b1fcb24e2d3247cae3fc55815d64fec640dc395840f8fa80969     # 签名 \nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest          # 真实地址\n")])])]),r("ul",[r("li",[r("p",[e._v("3.1 等价\ndocker pull mysql === docker pull docker.io/library/mysql:latest")])]),e._v(" "),r("li",[r("p",[e._v("3.2 docker pull mysql:5.7")])])]),e._v(" "),r("blockquote",[r("p",[e._v("版本官方文档得有")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@VM-0-4-centos ~]# docker pull mysql:5.7\n5.7: Pulling from library/mysql\n69692152171a: Already exists \n1651b0be3df3: Already exists \n951da7386bc8: Already exists \n0f86c95aa242: Already exists \n37ba2d8bd4fe: Already exists \n6d278bb05e94: Already exists \n497efbd93a3e: Already exists \na023ae82eef5: Pull complete \ne76c35f20ee7: Pull complete \ne887524d2ef9: Pull complete \nccb65627e1c3: Pull complete \nDigest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21fa\nStatus: Downloaded newer image for mysql:5.7\ndocker.io/library/mysql:5.7\n")])])]),r("ul",[r("li",[r("ol",{attrs:{start:"4"}},[r("li",[e._v("docker rmi  删除镜像")])])]),e._v(" "),r("li",[r("p",[e._v("4.1 docker rmi -f 镜像id")])])]),e._v(" "),r("p",[e._v("docker rmi -f c0cdc95609f1     删除指定的镜像")]),e._v(" "),r("p",[e._v("docker rmi -f 镜像id 镜像id 镜像id    删除多个镜像")]),e._v(" "),r("ul",[r("li",[e._v("4.2 docker rmi -f $(docker images -aq)  删除全部镜像")])]),e._v(" "),r("h2",{attrs:{id:"容器命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器命令"}},[e._v("#")]),e._v(" 容器命令")]),e._v(" "),r("blockquote",[r("p",[e._v("有了镜像才能创建容器，linux ， 下载一个 centos 镜像来测试学习")])]),e._v(" "),r("ul",[r("li",[r("ol",[r("li",[e._v("创建容器")])])])]),e._v(" "),r("p",[e._v("docker pull centos")]),e._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("新建容器并启动")])])])]),e._v(" "),r("p",[e._v("docker run --help")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('docker run [可选参数] image\n\n# 参数说明\n--name="Name"  容器名字  tomcat01\n-d   后台方式运行 ja  \n-it  使用交互方式进行，进入容器查看内容\n-p   指定容器的端口    小\n    -p   ip:主机端口:容器端口\n    -p   主机端口:容器端口  （常用） \n    -p   容器端口\n    容器端口\n-P   随机指定端口      大\n\n# 测试， 启动并进入容器\n[root@VM-0-4-centos ~]# docker run -it centos /bin/bash\n[root@79286024b996 /]# \n\n# 查看容器内的 centos ， 基础版本， 很多命令都是不完善的\n[root@79286024b996 /]# ls\nbin  etc   lib\t  lost+found  mnt  proc  run   srv  tmp  var\ndev  home  lib64  media       opt  root  sbin  sys  usr\n')])])]),r("ul",[r("li",[r("ol",{attrs:{start:"3"}},[r("li",[e._v("从容器退到主机")])])])]),e._v(" "),r("p",[e._v("exit")]),e._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"4"}},[r("li",[e._v("容器不停止退出")])])])]),e._v(" "),r("p",[e._v("ctrl + P + Q")]),e._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"5"}},[r("li",[e._v("列出所有运行的容器")])])])]),e._v(" "),r("p",[e._v("docker ps")]),e._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"6"}},[r("li",[e._v("删除容器")])])])]),e._v(" "),r("p",[e._v("docker rm 容器id    删除指定容器, 不能删除正在运行的容器")]),e._v(" "),r("p",[e._v("docker rm -f 容器id    强制删除容器")]),e._v(" "),r("p",[e._v("docker rm -f $(docker ps -aq)   删除所有容器")]),e._v(" "),r("p",[e._v("docker ps -a -q|xargs docker rm    删除所有容器")]),e._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"7"}},[r("li",[e._v("启动和停止容器操作")])])]),e._v(" "),r("li",[r("p",[e._v("7.1 docker start 容器id      启动容器")])])]),e._v(" "),r("p",[e._v("docker start CONTAINER_ID")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("7.2 docker restart 容器id   重启容器")])]),e._v(" "),r("li",[r("p",[e._v("7.3 docker stop 容器id      停止当前正在运行的容器")])]),e._v(" "),r("li",[r("p",[e._v("7.4 docker kill 容器id     强制停止当前容器")])])]),e._v(" "),r("h2",{attrs:{id:"常用的其他命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用的其他命令"}},[e._v("#")]),e._v(" 常用的其他命令")]),e._v(" "),r("ul",[r("li",[r("ol",[r("li",[e._v("后台启动容器")])])])]),e._v(" "),r("p",[e._v("docker run -d 镜像名")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# 启动\n[root@VM-0-4-centos ~]# docker run -d centos\n242e7fd17b50481516e195d91eeb74f6053ce57615d84aa4b416c8d12edc5b37\n\n# 问题： \ndocker ps 发现centos停止了\n\n# 常见的坑\n容器使用后台运行，就必须要有一个前台的进程，docker 发现没有应用，就会自动停止\n\n# nginx 容器启动后，发现自己没有提供服务，就会立刻停止 ，就是没有程序了\n")])])]),r("ul",[r("li",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("查看日志")])])])]),e._v(" "),r("p",[e._v("docker logs")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker run -it centos /bin/bash\nctrl + p + q\n\ndocker logs -tf --tail 10 6c05ff85b129   6c05ff85b129 是 CONTAINER_ID\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('docker logs -f -t --tail 10 6c05ff85b129  没有日志\n\n# 自己编写一段 shell 脚本\ndocker run -d centos /bin/bash -c "while true;do echo 1;sleep 1;done"\n\n# [root@VM-0-4-centos ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES\nff1efccb099f   centos    "/bin/bash -c \'while…"   4 seconds ago   Up 3 seconds             friendly_sinoussi\n\n# 显示日志\n-tf     #显示日志  -f 带上时间戳\n--tail    # 显示条数\n\n[root@VM-0-4-centos ~]# docker logs -tf --tail 10 ff1efccb099f\n2021-05-20T12:41:24.132331109Z 1\n2021-05-20T12:41:25.134264766Z 1\n2021-05-20T12:41:26.136215077Z 1\n2021-05-20T12:41:27.138141416Z 1\n2021-05-20T12:41:28.140077091Z 1\n2021-05-20T12:41:29.141998628Z 1\n2021-05-20T12:41:30.144141848Z 1\n')])])]),r("h2",{attrs:{id:"查看容器进程信息-ps"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看容器进程信息-ps"}},[e._v("#")]),e._v(" 查看容器进程信息 ps")]),e._v(" "),r("p",[e._v("docker top 容器id")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@VM-0-4-centos ~]# docker top ff1efccb099f\nUID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD\nroot                25511               25492               0                   20:41               ?                   00:00:00            /bin/bash -c while true;do echo 1;sleep 1;done\nroot                28177               25511               0                   20:54               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1\n")])])]),r("h2",{attrs:{id:"查看镜像元数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看镜像元数据"}},[e._v("#")]),e._v(" 查看镜像元数据")]),e._v(" "),r("p",[e._v("docker inspect  容器id")]),e._v(" "),r("p",[r("img",{attrs:{src:a(352),alt:"容器信息"}})]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('[root@VM-0-4-centos ~]# docker inspect ff1efccb099f\n[\n    {\n        "Id": "ff1efccb099f11de49cd9f00b61c6909e7f28da5412b472d9290b4c9cf91e8b9",\n        "Created": "2021-05-20T12:41:07.762528629Z",\n        "Path": "/bin/bash",\n        "Args": [\n            "-c",\n            "while true;do echo 1;sleep 1;done"\n        ],\n        "State": {\n            "Status": "running",\n            "Running": true,\n            "Paused": false,\n            "Restarting": false,\n            "OOMKilled": false,\n            "Dead": false,\n            "Pid": 25511,\n            "ExitCode": 0,\n            "Error": "",\n            "StartedAt": "2021-05-20T12:41:08.102408984Z",\n            "FinishedAt": "0001-01-01T00:00:00Z"\n        },\n        "Image": "sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55",\n        "ResolvConfPath": "/var/lib/docker/containers/ff1efccb099f11de49cd9f00b61c6909e7f28da5412b472d9290b4c9cf91e8b9/resolv.conf",\n        "HostnamePath": "/var/lib/docker/containers/ff1efccb099f11de49cd9f00b61c6909e7f28da5412b472d9290b4c9cf91e8b9/hostname",\n        "HostsPath": "/var/lib/docker/containers/ff1efccb099f11de49cd9f00b61c6909e7f28da5412b472d9290b4c9cf91e8b9/hosts",\n        "LogPath": "/var/lib/docker/containers/ff1efccb099f11de49cd9f00b61c6909e7f28da5412b472d9290b4c9cf91e8b9/ff1efccb099f11de49cd9f00b61c6909e7f28da5412b472d9290b4c9cf91e8b9-json.log",\n        "Name": "/friendly_sinoussi",\n        "RestartCount": 0,\n        "Driver": "overlay2",\n        "Platform": "linux",\n        "MountLabel": "",\n        "ProcessLabel": "",\n        "AppArmorProfile": "",\n        "ExecIDs": null,\n        "HostConfig": {\n            "Binds": null,\n            "ContainerIDFile": "",\n            "LogConfig": {\n                "Type": "json-file",\n                "Config": {}\n            },\n            "NetworkMode": "default",\n            "PortBindings": {},\n            "RestartPolicy": {\n                "Name": "no",\n                "MaximumRetryCount": 0\n            },\n            "AutoRemove": false,\n            "VolumeDriver": "",\n            "VolumesFrom": null,\n            "CapAdd": null,\n            "CapDrop": null,\n            "CgroupnsMode": "host",\n            "Dns": [],\n            "DnsOptions": [],\n            "DnsSearch": [],\n            "ExtraHosts": null,\n            "GroupAdd": null,\n            "IpcMode": "private",\n            "Cgroup": "",\n            "Links": null,\n            "OomScoreAdj": 0,\n            "PidMode": "",\n            "Privileged": false,\n            "PublishAllPorts": false,\n            "ReadonlyRootfs": false,\n            "SecurityOpt": null,\n            "UTSMode": "",\n            "UsernsMode": "",\n            "ShmSize": 67108864,\n            "Runtime": "runc",\n            "ConsoleSize": [\n                0,\n                0\n            ],\n            "Isolation": "",\n            "CpuShares": 0,\n            "Memory": 0,\n            "NanoCpus": 0,\n            "CgroupParent": "",\n            "BlkioWeight": 0,\n            "BlkioWeightDevice": [],\n            "BlkioDeviceReadBps": null,\n            "BlkioDeviceWriteBps": null,\n            "BlkioDeviceReadIOps": null,\n            "BlkioDeviceWriteIOps": null,\n            "CpuPeriod": 0,\n            "CpuQuota": 0,\n            "CpuRealtimePeriod": 0,\n            "CpuRealtimeRuntime": 0,\n            "CpusetCpus": "",\n            "CpusetMems": "",\n            "Devices": [],\n            "DeviceCgroupRules": null,\n            "DeviceRequests": null,\n            "KernelMemory": 0,\n            "KernelMemoryTCP": 0,\n            "MemoryReservation": 0,\n            "MemorySwap": 0,\n            "MemorySwappiness": null,\n            "OomKillDisable": false,\n            "PidsLimit": null,\n            "Ulimits": null,\n            "CpuCount": 0,\n            "CpuPercent": 0,\n            "IOMaximumIOps": 0,\n            "IOMaximumBandwidth": 0,\n            "MaskedPaths": [\n                "/proc/asound",\n                "/proc/acpi",\n                "/proc/kcore",\n                "/proc/keys",\n                "/proc/latency_stats",\n                "/proc/timer_list",\n                "/proc/timer_stats",\n                "/proc/sched_debug",\n                "/proc/scsi",\n                "/sys/firmware"\n            ],\n            "ReadonlyPaths": [\n                "/proc/bus",\n                "/proc/fs",\n                "/proc/irq",\n                "/proc/sys",\n                "/proc/sysrq-trigger"\n            ]\n        },\n        "GraphDriver": {\n            "Data": {\n                "LowerDir": "/var/lib/docker/overlay2/265e4e5982f95505a01cd3502c3991994703718e9b21362fcd2fc766eed6a937-init/diff:/var/lib/docker/overlay2/bcfaf25d511d8afdca79e7813cc52c0eb33e26a6fe4161cb249d0b2597fe783b/diff",\n                "MergedDir": "/var/lib/docker/overlay2/265e4e5982f95505a01cd3502c3991994703718e9b21362fcd2fc766eed6a937/merged",\n                "UpperDir": "/var/lib/docker/overlay2/265e4e5982f95505a01cd3502c3991994703718e9b21362fcd2fc766eed6a937/diff",\n                "WorkDir": "/var/lib/docker/overlay2/265e4e5982f95505a01cd3502c3991994703718e9b21362fcd2fc766eed6a937/work"\n            },\n            "Name": "overlay2"\n        },\n        "Mounts": [],\n        "Config": {\n            "Hostname": "ff1efccb099f",\n            "Domainname": "",\n            "User": "",\n            "AttachStdin": false,\n            "AttachStdout": false,\n            "AttachStderr": false,\n            "Tty": false,\n            "OpenStdin": false,\n            "StdinOnce": false,\n            "Env": [\n                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\n            ],\n            "Cmd": [\n                "/bin/bash",\n                "-c",\n                "while true;do echo 1;sleep 1;done"\n            ],\n            "Image": "centos",\n            "Volumes": null,\n            "WorkingDir": "",\n            "Entrypoint": null,\n            "OnBuild": null,\n            "Labels": {\n                "org.label-schema.build-date": "20201204",\n                "org.label-schema.license": "GPLv2",\n                "org.label-schema.name": "CentOS Base Image",\n                "org.label-schema.schema-version": "1.0",\n                "org.label-schema.vendor": "CentOS"\n            }\n        },\n        "NetworkSettings": {\n            "Bridge": "",\n            "SandboxID": "2f0438d50ff0ef4d7e2af695ef18eeb8bc5bfe0ad011f85d769255db45c5dee0",\n            "HairpinMode": false,\n            "LinkLocalIPv6Address": "",\n            "LinkLocalIPv6PrefixLen": 0,\n            "Ports": {},\n            "SandboxKey": "/var/run/docker/netns/2f0438d50ff0",\n            "SecondaryIPAddresses": null,\n            "SecondaryIPv6Addresses": null,\n            "EndpointID": "b6aa356a38b1baee48ac8ecb3800b48f361b310aef71cd7306cae1501222391d",\n            "Gateway": "172.18.0.1",\n            "GlobalIPv6Address": "",\n            "GlobalIPv6PrefixLen": 0,\n            "IPAddress": "172.18.0.2",\n            "IPPrefixLen": 16,\n            "IPv6Gateway": "",\n            "MacAddress": "02:42:ac:12:00:02",\n            "Networks": {\n                "bridge": {\n                    "IPAMConfig": null,\n                    "Links": null,\n                    "Aliases": null,\n                    "NetworkID": "9d496db23b8596a0de65a51ea34116151b7946b4751f8453d48feab9b7d0b3d0",\n                    "EndpointID": "b6aa356a38b1baee48ac8ecb3800b48f361b310aef71cd7306cae1501222391d",\n                    "Gateway": "172.18.0.1",\n                    "IPAddress": "172.18.0.2",\n                    "IPPrefixLen": 16,\n                    "IPv6Gateway": "",\n                    "GlobalIPv6Address": "",\n                    "GlobalIPv6PrefixLen": 0,\n                    "MacAddress": "02:42:ac:12:00:02",\n                    "DriverOpts": null\n                }\n            }\n        }\n    }\n]\n')])])]),r("h2",{attrs:{id:"进入当前正在运行的容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进入当前正在运行的容器"}},[e._v("#")]),e._v(" 进入当前正在运行的容器")]),e._v(" "),r("blockquote",[r("p",[e._v("我们通常容器都是使用后台方式运行的，需要进入容器修改一些配置")])]),e._v(" "),r("ul",[r("li",[r("ol",[r("li",[e._v("命令1")])])])]),e._v(" "),r("p",[e._v("docker exec -it 容器id  bashShell")]),e._v(" "),r("ul",[r("li",[e._v("测试")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('[root@VM-0-4-centos ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES\nff1efccb099f   centos    "/bin/bash -c \'while…"   29 minutes ago   Up 29 minutes             friendly_sinoussi\n[root@VM-0-4-centos ~]# docker exec -it ff1efccb099f /bin/bash\n[root@ff1efccb099f /]# ls\nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n[root@ff1efccb099f /]# ps -ef\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 12:41 ?        00:00:00 /bin/bash -c while true;do echo 1;sleep 1;done\nroot      1949     0  0 13:13 pts/0    00:00:00 /bin/bash\nroot      1989     1  0 13:13 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1\nroot      1990  1949  0 13:13 pts/0    00:00:00 ps -ef\n')])])]),r("ul",[r("li",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("命令2")])])])]),e._v(" "),r("p",[e._v("docker attach 容器id")]),e._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"3"}},[r("li",[e._v("exec 和 attach 区别")])])])]),e._v(" "),r("p",[e._v("docker exec   进入一个容器后开启一个新的终端， 可以在里面操作")]),e._v(" "),r("p",[e._v("docker attach    进入容器正在执行的终端，不会启动新的进程")]),e._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"4"}},[r("li",[e._v("从容器内拷贝文件到主机上")])])])]),e._v(" "),r("p",[e._v("docker  cp  容器id:容器内路径   目的主机路径")]),e._v(" "),r("blockquote",[r("p",[e._v("只要容器在，数据就在")])]),e._v(" "),r("ul",[r("li",[e._v("测试")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@VM-0-4-centos home]# docker ps -aq\n96128ce250ef\n\n# 进入容器内容\n[root@VM-0-4-centos home]# docker attach 96128ce250ef\n[root@96128ce250ef home]# ls\n\n# 在容器内新建一个文件\n[root@96128ce250ef home]# touch test.java \n[root@96128ce250ef home]# ls\ntest.java\n[root@96128ce250ef home]# exit\nexit\n[root@VM-0-4-centos home]# ls\n\n# 将这文件拷贝到主机上\n[root@VM-0-4-centos home]# docker cp 96128ce250ef:/home/test.java /home\n[root@VM-0-4-centos home]# ls\ntest.java\n[root@VM-0-4-centos home]# \n")])])]),r("blockquote",[r("p",[e._v("现在拷贝是一个手动过程，后边会使用 -V 卷的技术，可以实现自动同步   /home  /home")])]),e._v(" "),r("p",[r("img",{attrs:{src:a(512),alt:"命令总结"}})]),e._v(" "),r("p",[r("img",{attrs:{src:a(513),alt:"命令总结"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);