(window.webpackJsonp=window.webpackJsonp||[]).push([[370],{1035:function(n,t,s){"use strict";s.r(t);var e=s(10),a=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_4-如何调适和阅读webpack源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何调适和阅读webpack源码"}},[n._v("#")]),n._v(" 4.如何调适和阅读webpack源码")]),n._v(" "),t("p",[n._v("webpack-cli/bin/cli.js  这是一切打包的入口")]),n._v(" "),t("p",[n._v("npx webpack  是如何工作的")]),n._v(" "),t("p",[n._v("是找到 node_modules/.bin/webpack")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("echo %~dp0  输出当前的路径\npuash 暂停\n")])])]),t("p",[n._v("compiler  全局只有一个\ncompilation  代表一次编译\n继承 tapable 可以订阅和发射事件")]),n._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[n._v("compiler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" stats")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=>")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// stats 输入内容信息")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n")])])]),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// SingleEntryPlugin ")]),n._v("\ncompiler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("hooks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("make"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("tapAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v("'SingleEntryPlugin'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("compiler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" callback")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=>")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" context "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" dep "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" SingleEntryPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("createDependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    compilation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("addEntry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" dep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" callback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n")])])]),n._v(" "),t("h2",{attrs:{id:"webpack执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack执行流程"}},[n._v("#")]),n._v(" webpack执行流程")]),n._v(" "),t("h3",{attrs:{id:"compiler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiler"}},[n._v("#")]),n._v(" compiler")]),n._v(" "),t("p",[n._v("environment   设置node环境变量\nafterEnvironment  设置环境变量完成\nentryOption   解析入口文件\nafterPlugins  挂在插件结束， 在 webpack.config.js 上会挂载很多的插件\nafterResolvers   在路径解析器初始化后触发， 核心作用是给他路径，就能找到绝对路径\ninitialize\nbeforeRun  开始编译前\nrun        开始编译\nnormalModuleFactory   创建普通模块工厂\ncontextModuleFactory  创建上下文模块工厂\nbeforeCompile   开始编译前\ncompile   编译\nthisCompilation   开始启动编译\ncompilation  开始创建 compilation\nmake    最核心代码，是从入口文件开始编译\nfinishMake"),t("br"),n._v("\nafterCompile  编译完成\nshouldEmit  询问是否要生成文件\nemit  生成文件\n（assetEmitted 资源已经生成 已经不存在了）\nafterEmit  生成完成\ndone  编译结束\nafterDone")]),n._v(" "),t("h3",{attrs:{id:"compilation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compilation"}},[n._v("#")]),n._v(" Compilation")]),n._v(" "),t("p",[n._v("buildModule  编译入口模块  2\nrebuildModule\nfailedModule\nsucceedModule   成功加载模块  4\nstillValidModule\naddEntry   添加入口 ./src/index.js  1\nfailedEntry   入口解析失败   5\nsucceedEntry   入口解析成功   5\ndependencyReferencedExports\nfinishModules    完成模块编译   6\nfinishRebuildingModule\nunseal\nseal   封装，一旦封装完成，不再向内添加新的模块   7\nbeforeChunks\nafterChunks\noptimizeDependencies    优化依赖项\nafterOptimizeDependencies\noptimize\noptimizeModules  优化 modules\nafterOptimizeModules\noptimizeChunks  优化 chunks\nafterOptimizeChunks\noptimizeTree\nafterOptimizeTree\noptimizeChunkModules  优化 chunks module\nafterOptimizeChunkModules\nshouldRecord   是否要记录  stats文件\nadditionalChunkRuntimeRequirements\nruntimeRequirementInChunk\nadditionalModuleRuntimeRequirements\nruntimeRequirementInModule\nadditionalTreeRuntimeRequirements\nruntimeRequirementInTree\nruntimeModule\nreviveModules\nbeforeModuleIds"),t("br"),n._v("\nmoduleIds\noptimizeModuleIds\nafterOptimizeModuleIds\nreviveChunks\nbeforeChunkIds\nchunkIds\noptimizeChunkIds\nafterOptimizeChunkIds\nrecordModules 记录模块\nrecordChunks  记录 chunk\noptimizeCodeGeneration\nbeforeModuleHash\nafterModuleHash\nbeforeCodeGeneration\nafterCodeGeneration\nbeforeRuntimeRequirements\nafterRuntimeRequirements\nbeforeHash   生成 hash 前\ncontentHash  生成内容hash\nafterHash\nrecordHash\nrecord\nbeforeModuleAssets\nshouldGenerateChunkAssets\nbeforeChunkAssets\nadditionalChunkAssets\nadditionalAssets\noptimizeChunkAssets\nafterOptimizeChunkAssets\noptimizeAssets\nafterOptimizeAssets\nprocessAssets\nafterProcessAssets\nprocessAdditionalAssets\nneedAdditionalSeal\nafterSeal\nrenderManifest\nfullHash\nchunkHash\nmoduleAsset\nchunkAsset\nassetPath\nneedAdditionalPass\nchildCompiler\nlog\nprocessWarnings\nprocessErrors\nstatsPreset\nstatsNormalize\nstatsFactory\nstatsPrinter\nnormalModuleLoader  拿到正常的模块加载器  3")]),n._v(" "),t("h2",{attrs:{id:"_5-stats"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-stats"}},[n._v("#")]),n._v(" 5.stats")]),n._v(" "),t("p",[n._v("npx webpack --profile --json > stats.json")]),n._v(" "),t("h2",{attrs:{id:"module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[n._v("#")]),n._v(" module")]),n._v(" "),t("p",[n._v("会根据依赖关系生成 chunk")]),n._v(" "),t("ol",[t("li",[n._v("每个入口文件天然就是一个 chunk， 此入口文件和依赖的模块生成一个 chunk")]),n._v(" "),t("li",[n._v("如果说某个模块里有动态引入语句 import 语句，就会由 import 单独生成一个新的代码块，这个代码块放置着动态引入的模块，以及动态引入的模块引入的模块")]),n._v(" "),t("li",[n._v("splitchunks 实现同步代码分割，把多个代码块公共的模块提供一个单独的代码块；还可以把某些模块， 比如 node_modules 里的模块单独提出来成立一个代码块")])]),n._v(" "),t("h2",{attrs:{id:"splitchunks中的配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks中的配置"}},[n._v("#")]),n._v(" splitchunks中的配置")]),n._v(" "),t("h3",{attrs:{id:"chunks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chunks"}},[n._v("#")]),n._v(" chunks")]),n._v(" "),t("p",[n._v("chunks 有个三个 配置 async、initial和all。")]),n._v(" "),t("ul",[t("li",[n._v("async 表示只从异步加载得模块（动态加载import()）里面进行拆分\n异步里的同步也会拆分")]),n._v(" "),t("li",[n._v("initial 表示只从入口模块进行拆分")]),n._v(" "),t("li",[n._v("all 表示以上两者都包括")])])])}),[],!1,null,null,null);t.default=a.exports}}]);