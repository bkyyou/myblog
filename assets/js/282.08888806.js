(window.webpackJsonp=window.webpackJsonp||[]).push([[282],{908:function(a,t,e){"use strict";e.r(t);var s=e(10),_=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_3-shell变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-shell变量"}},[a._v("#")]),a._v(" 3.shell变量")]),a._v(" "),t("h2",{attrs:{id:"_3-1-变量定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-变量定义"}},[a._v("#")]),a._v(" 3.1.变量定义")]),a._v(" "),t("blockquote",[t("p",[a._v("变量与值之间不能有空格")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@VM-0-4-centos ~]# name='123'\n[root@VM-0-4-centos ~]# echo $name\n123\n[root@VM-0-4-centos ~]# echo ${name}\n123\n\n变量名\n变量类型，bash默认会把所有变量都认为是字符串\nbash变量是弱类型\n")])])]),t("h2",{attrs:{id:"_3-2-变量名规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-变量名规则"}},[a._v("#")]),a._v(" 3.2.变量名规则")]),a._v(" "),t("ul",[t("li",[a._v("不能是关键字")]),a._v(" "),t("li",[a._v("只能是数字，字母，下划线")]),a._v(" "),t("li",[a._v("不能是数字开头")]),a._v(" "),t("li",[a._v("不能用标点符号")]),a._v(" "),t("li",[a._v("变量名严格区分大小写")])]),a._v(" "),t("h2",{attrs:{id:"_3-3-变量的作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-变量的作用域"}},[a._v("#")]),a._v(" 3.3.变量的作用域")]),a._v(" "),t("h3",{attrs:{id:"_3-3-1-变量的作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-变量的作用域"}},[a._v("#")]),a._v(" 3.3.1.变量的作用域")]),a._v(" "),t("p",[a._v("本地变量，只针对当前的作用域")]),a._v(" "),t("p",[a._v("pstree 检查进程树")]),a._v(" "),t("h3",{attrs:{id:"环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[a._v("#")]),a._v(" 环境变量")]),a._v(" "),t("p",[a._v("也称之为全局变量，针对当前shell以及任意子进程，环境变量也分为 自定义、内置两种环境变量")]),a._v(" "),t("h3",{attrs:{id:"局部变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局部变量"}},[a._v("#")]),a._v(" 局部变量")]),a._v(" "),t("p",[a._v("用于 shell函数 或者 shell脚本 中定义")]),a._v(" "),t("h3",{attrs:{id:"位置参数变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位置参数变量"}},[a._v("#")]),a._v(" 位置参数变量")]),a._v(" "),t("p",[a._v("用于 shell 脚本中传递参数")]),a._v(" "),t("h3",{attrs:{id:"特殊变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊变量"}},[a._v("#")]),a._v(" 特殊变量")]),a._v(" "),t("p",[a._v("shell 内置的特殊功效变量")]),a._v(" "),t("ul",[t("li",[a._v("echo $? 判断上一次命令是否成功  0 成功  1-255 错误码")]),a._v(" "),t("li",[a._v("echo $$ 返回登录shell的PID")]),a._v(" "),t("li",[a._v("echo $? 返回上一个命令的状态，0表示没有错误，其它任何值表明有错误")]),a._v(" "),t("li",[a._v("echo $# 返回传递到脚本的参数个数")]),a._v(" "),t("li",[a._v("echo $* 以一个单字符串显示所有向脚本传递的参数，与位置变量不同，此选项参数可超过9个")]),a._v(" "),t("li",[a._v("echo $! 返回后台运行的最后一个进程的进程ID号")]),a._v(" "),t("li",[a._v("echo $@ 返回传递到脚本的参数个数，但是使用时加引号，并在引号中返回每个参数")]),a._v(" "),t("li",[a._v("echo $- 显示shell使用的当前选项")]),a._v(" "),t("li",[a._v("echo $0 是脚本本身的名字")]),a._v(" "),t("li",[a._v("echo $_ 是保存之前执行的命令的最后一个参数")]),a._v(" "),t("li",[a._v("echo $1 传入脚本的第一个参数")]),a._v(" "),t("li",[a._v("echo $2 传入脚本的第二个参数")])]),a._v(" "),t("h3",{attrs:{id:"自定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义变量"}},[a._v("#")]),a._v(" 自定义变量")]),a._v(" "),t("p",[a._v("单引号变量，不识别特殊语法\n双引号变量，能识别特殊语法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('name="111";\nname2="${name}" // 111\nname3=\'${name}\' // ${name}\n\n[root@VM-0-4-centos /]# name=`ls`\n[root@VM-0-4-centos /]# echo $name\napp bin boot data dev etc home lib lib64 lost+found media mnt mydata opt proc root run sbin srv sys tmp usr var\n')])])]),t("blockquote",[t("p",[a._v("每次调用 bash/sh 解释器执行脚本，都会开启一个子shell，因此不会保留当前的shell变量，通过 pstree 命令检查进程树\n调用 source 或者点符号，在当前 shell 环境加载脚本，因此会保留变量")])])])}),[],!1,null,null,null);t.default=_.exports}}]);