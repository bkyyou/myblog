(window.webpackJsonp=window.webpackJsonp||[]).push([[292],{928:function(t,s,e){"use strict";e.r(s);var n=e(10),a=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_7-本地开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-本地开发"}},[t._v("#")]),t._v(" 7.本地开发")]),t._v(" "),s("h2",{attrs:{id:"应用启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用启动"}},[t._v("#")]),t._v(" 应用启动")]),t._v(" "),s("h3",{attrs:{id:"安装依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖"}},[t._v("#")]),t._v(" 安装依赖")]),t._v(" "),s("ul",[s("li",[t._v("本地开发需要使用到 egg-bin 模块")]),t._v(" "),s("li",[t._v("将 egg-bin 模块作为 devDependencies 引入： npm i egg-bin -D")])]),t._v(" "),s("h3",{attrs:{id:"添加命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加命令"}},[t._v("#")]),t._v(" 添加命令")]),t._v(" "),s("ul",[s("li",[t._v("添加 npm sctipts 到 package.json")])]),t._v(" "),s("h3",{attrs:{id:"指定端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定端口"}},[t._v("#")]),t._v(" 指定端口")]),t._v(" "),s("ul",[s("li",[t._v("本地启动应用默认监听 7001 端口，也可以指定其它端口")])]),t._v(" "),s("p",[t._v("通过 --port 指定端口")]),t._v(" "),s("ul",[s("li",[t._v("本地启动的应用是以 env:local 启动")]),t._v(" "),s("li",[t._v("读取的配置是 config.default.js 和 config.local.js 合并结果")]),t._v(" "),s("li",[t._v("运行 npm run dev 命令启动应用")])]),t._v(" "),s("h3",{attrs:{id:"demo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" demo")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. npm init -y\n2. npm i egg\n3. 新建 app 和 config 文件夹\n4. 在 config 文件夹下面新建 config.default.js \n   exports.keys = 'my_secret'\n5. app 文件夹下新建 router.js\n   module.exports = app => {\n     const { router, controller } = app;\n     router.get('/', controller.home.index);\n   }\n6. 在 app 文件夹下新建 controller 文件夹， 在 controller 下新建 home.js\n  const Controller = require('egg').Controller;\n  class HomeController extends Controller {\n    // this  ctx app service\n    async index() {\n      \x3c!-- this.ctx.body = 'hello world'; --\x3e\n      this.ctx.body = this.config.keys;  // 在 local 进行配置\n    }\n  }\n  module.exports = HomeController;\n\n7. npm i egg-bin -D\n8. 添加命令\n  sctipts: {\n    \"dev\": \"egg-bin dev\",\n    \"dev\": \"egg-bin dev --port 3000\", // 指定端口\n  }\n9. 在 config 文件下新建 config.local.js\n  exports.keys = 'my_local_secret'\n\n")])])]),s("h2",{attrs:{id:"单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),s("ul",[s("li",[t._v("添加 'npm sctipts' 到 'package.json'")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"sctips"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"egg-bin test"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("测试用例执行时，应该是以env:unittest启动的")]),t._v(" "),s("li",[t._v("读取配置也是 config.default.js 和 config.unittest.js 合并结果")]),t._v(" "),s("li",[t._v("运行 npm test 时 会自动执行 test 目录下以 '.test.js' 结尾的文件")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 运行单元测试命令\nnpm test\n")])])]),s("h3",{attrs:{id:"命令参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令参数"}},[t._v("#")]),t._v(" 命令参数")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("环境变量")]),t._v(" "),s("p",[t._v("Linux 可以在命令行中直接设置环境变量")]),t._v(" "),s("p",[t._v("window 下需要命令行设置临时的环境变量，然后再去运行 npm test 命令； 或者手动的添加环境变量")]),t._v(" "),s("p",[t._v("window 下： set TEST=test/controller/home.test.js& npm test")]),t._v(" "),s("ul",[s("li",[t._v("我们在编写用例时，可以指定特定用例文件")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("TESTS=test/x.test.js npm test\n")])])]),s("ul",[s("li",[t._v("还可以手动设置 TEST_REPORTER 环境变量来指定 reporter")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("TEST_REPORTER=dot npm test\n")])])]),s("ul",[s("li",[t._v("默认执行超时时间为 30s, 我们也可以手动设置超时时间")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("TEST_TIMEOUT=5000 npm test\n")])])])]),t._v(" "),s("li",[s("p",[t._v("通过 argv 方式传参")])])]),t._v(" "),s("p",[t._v("'egg-bin test'除了环境变量的方式，也支持直接传参")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('# npm 传递参数需要额外加一个 --\nnpm test --  --help\n\n# 等同于 TESTS=test/**/*.test.js npm test\nnpm test "test/**/*.test.js  // 正则 test 文件夹下所有 .test.js 结尾的文件\n\n# 支持 mocha 的参数， 如 grep, require等\nnpm test -- -t 30000 --grep="should GET"\n//  --timeout\n')])])]),s("ul",[s("li",[t._v("demo")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. 新建命令\n  scipts: {\n    \"test\": \"egg-bin test\"\n  }\n2. config 下新建 config.unittest.js\n3. 新建 test 文件夹， 之后新建 test/controller/home.test.js\n  const { app, mock, assert } = require('egg-mock/bootstrap');\n  describe('test/controller/home.test.js', () => {\n    it('should status 200 and get the body', () => {\n      app.httpRequest().get('/').expect(200).expect('hello hello')\n    })\n  })\n4. npm i egg-mock -D\n5. 运行\n  npm test\n  set TEST=test/controller/home.test.js& npm test\n  set TEST_REPORTER=dot npm test\n  set TEST_TIMEOUT=5000 npm test\n  npm test \"test/controller/home.test.js\"\n  npm test \"test/controller/home.test.js\" -- -t 1000\n")])])]),s("h3",{attrs:{id:"代码覆盖率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码覆盖率"}},[t._v("#")]),t._v(" 代码覆盖率")]),t._v(" "),s("ul",[s("li",[t._v("添加 npm scripts 到 package.json")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"cov": "egg-bin cov"\n')])])]),s("ul",[s("li",[s("p",[t._v("可以通过 npm run cov 命令来进行单元测试覆盖率")])]),t._v(" "),s("li",[s("p",[t._v("通过 coverage/lcov-report/index.html打开完整的 HTML 覆盖率报告")])]),t._v(" "),s("li",[s("p",[t._v("对于不需要跑测试覆盖率的文件，可以通过 'COV_EXCLUDES' 环境变量指定")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("COV_EXCLUDES=app/plugins/c*  npm run cov\n# 或者传参的方式\nnpm run cov --  --x=app/plugins/c*\n")])])]),s("ul",[s("li",[t._v("demo\n"),s("ul",[s("li",[t._v('新建命令\n"scripts": {\n"cov": "egg-bin"\n}')]),t._v(" "),s("li",[t._v("执行 npm run cov  会自动生成 coverage 文件夹")])])])]),t._v(" "),s("h2",{attrs:{id:"调试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[t._v("#")]),t._v(" 调试")]),t._v(" "),s("h3",{attrs:{id:"使用-logger-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-logger-模块"}},[t._v("#")]),t._v(" 使用 logger 模块")]),t._v(" "),s("p",[t._v("框架内置了日志功能，可以使用 logger.debug() 输出调试信息")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// controller.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'current user: %j'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// service")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'debug info from service'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// app.js")]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'app debug info'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("只打印 info 以上")])]),t._v(" "),s("h3",{attrs:{id:"使用-debug-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-debug-模块"}},[t._v("#")]),t._v(" 使用 debug 模块")]),t._v(" "),s("ul",[s("li",[t._v("debug 模块是 Node 社区广泛使用的 debug 工具")]),t._v(" "),s("li",[t._v("我们可以通过 'DEBUG' 环境变量选择开启指定调试代码，方便观测执行过程")]),t._v(" "),s("li",[t._v("单元测试时也可以查看测试用例运行的详细日志")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 开启所有模块的日志\nDEBUG=* npm run dev\n\n# 开启指定模块的日志\nDEBUG=egg* npm run dev\n\n# 查看用例测试日志\nDEBUG=* npm test\n")])])]),s("h3",{attrs:{id:"使用-egg-bin-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-egg-bin-模块"}},[t._v("#")]),t._v(" 使用 egg-bin 模块")]),t._v(" "),s("ul",[s("li",[t._v("添加 npm sctipts 到 package.json")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"debug": "egg-bin debug"\n')])])]),s("ul",[s("li",[t._v("可以通过 npm run debug 命令来进行断点调试")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm run debug\n")])])]),s("ul",[s("li",[s("p",[t._v("egg-bin 会只能选择调试协议\nnode > 8.x    协议")])]),t._v(" "),s("li",[s("p",[t._v("断点调试方式")]),t._v(" "),s("ul",[s("li",[t._v("DevTools 调试")]),t._v(" "),s("li",[t._v("vscode 调试")])])])]),t._v(" "),s("h3",{attrs:{id:"demo-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demo-2"}},[t._v("#")]),t._v(" demo")]),t._v(" "),s("ul",[s("li",[t._v("logger")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. 新建 app.js\n  module.exports = app => {\n    app.logger.debug('app 的 debug 信息')\n  }\n  app/controller/home.js\n  index() {\n    this.logger.debug('这是 controller 中 debug 信息')\n  }\n  app/service/home.js\n  index() {\n    this.ctx.logger.debug('这是 service 中的 debug 信息')\n  }\n2. npm run dev\n3. config/config.local.js\n  exports.logger = {\n    consoleLevel: 'DEBUG',\n    level: 'DEBUG'\n  }\n")])])]),s("ul",[s("li",[t._v("debug")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set DEBUG=*& npm run dev\n// 上边设置了环境变量\nnpm test\n")])])]),s("ul",[s("li",[t._v("egg-bin")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('在浏览器中断点调试\n1. 配置命令\nscripts:{\n  "debug": "egg-bin debug"\n}\n2.启动  \nnpm run debug\n3. 地址栏输入\nchrome://inspect/#devices\n4. 点击 configure..., 添加 ip localhost:7000\n5. 点击 add folder to workspace\n\n在 vscode 做断点调试\n1. file => perferences => settings\n2. 搜索 node debug \n3. 配置 debug> node: auto attach 配置成 on\n4. npm run debug\n')])])])])}),[],!1,null,null,null);s.default=a.exports}}]);