(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{832:function(t,a,s){"use strict";s.r(a);var n=s(10),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_3-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-运算符"}},[t._v("#")]),t._v(" 3.运算符")]),t._v(" "),a("h2",{attrs:{id:"_3-1-算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-算术运算符"}},[t._v("#")]),t._v(" 3.1.算术运算符")]),t._v(" "),a("p",[t._v("加减乘除取模(+ - * / %)")]),t._v(" "),a("blockquote",[a("p",[t._v("整数参与计算得到的只能是整数，小数参与计算可能得到不精确的计算结果")])]),t._v(" "),a("h2",{attrs:{id:"_3-2-隐式转换和强制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-隐式转换和强制转换"}},[t._v("#")]),t._v(" 3.2.隐式转换和强制转换")]),t._v(" "),a("h3",{attrs:{id:"_3-3-1-隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-隐式转换"}},[t._v("#")]),t._v(" 3.3.1.隐式转换")]),t._v(" "),a("ul",[a("li",[t._v("把一个取值范围的数值，转换成取值范围大的数值")]),t._v(" "),a("li",[t._v("byte short char 三种类型的数据在运算的时候，都会直接先提升 int, 然后再进行运算")])]),t._v(" "),a("blockquote",[a("p",[t._v("隐式转换会自动类型提升\n两个 byte | short | char 相加也会先转换成 int 再计算")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-3-2-强制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-强制转换"}},[t._v("#")]),t._v(" 3.3.2.强制转换")]),t._v(" "),a("p",[t._v("如果把一个取值范围大的数值，赋值给一个取值范围小的变量，是不允许直接赋值的。如果一定要这么做就需要加入强制类型转换了")]),t._v(" "),a("p",[t._v("格式： 目标数据类型 变量名 = (目标数据类型)被转换的类型;")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-4-字符串和字符的加操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-字符串和字符的加操作"}},[t._v("#")]),t._v(" 3.4.字符串和字符的加操作")]),t._v(" "),a("h3",{attrs:{id:"_3-4-1-字符串的-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-字符串的-操作"}},[t._v("#")]),t._v(" 3.4.1.字符串的 + 操作")]),t._v(" "),a("ul",[a("li",[t._v("当 + 操作中出现字符串时，这个 + 是 字符串连接符，而不是算数运算符。会将前后的数据进行拼接，并产生一个新的字符串。")]),t._v(" "),a("li",[t._v("连续进行 + 操作时， 从左到右逐个执行")]),t._v(" "),a("li",[t._v("当 字符 和 数字 运算时， 会把字符通过 ASCll 码表查询到对应的数字再进行计算")])]),t._v(" "),a("h2",{attrs:{id:"_3-5-自增自减运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-自增自减运算符"}},[t._v("#")]),t._v(" 3.5.自增自减运算符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("作用")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("++")]),t._v(" "),a("td",[t._v("加")]),t._v(" "),a("td",[t._v("变量的值加1")])]),t._v(" "),a("tr",[a("td",[t._v("--")]),t._v(" "),a("td",[t._v("减")]),t._v(" "),a("td",[t._v("变量的值减1")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-6-赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-赋值运算符"}},[t._v("#")]),t._v(" 3.6.赋值运算符")]),t._v(" "),a("p",[t._v("+= -= *= /= %= 底层都隐藏了一个强制类型转换")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("作用")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("=")]),t._v(" "),a("td",[t._v("赋值")]),t._v(" "),a("td",[t._v("int a=10， 将 a 赋值给变量 a")])]),t._v(" "),a("tr",[a("td",[t._v("+=")]),t._v(" "),a("td",[t._v("加后赋值")]),t._v(" "),a("td",[t._v("a+=b， 将 a+b 的值赋值给变量 a")])]),t._v(" "),a("tr",[a("td",[t._v("-=")]),t._v(" "),a("td",[t._v("减后赋值")]),t._v(" "),a("td",[t._v("a-=b， 将 a-b 的值赋值给变量 a")])]),t._v(" "),a("tr",[a("td",[t._v("*=")]),t._v(" "),a("td",[t._v("乘后赋值")]),t._v(" "),a("td",[t._v("a*=b， 将 a*b 的值赋值给变量 a")])]),t._v(" "),a("tr",[a("td",[t._v("/=")]),t._v(" "),a("td",[t._v("除后赋值")]),t._v(" "),a("td",[t._v("a/=b， 将 a➗b 的值赋值给变量 a")])]),t._v(" "),a("tr",[a("td",[t._v("%=")]),t._v(" "),a("td",[t._v("取余后赋值")]),t._v(" "),a("td",[t._v("a%=b， 将 a➗b 的余数赋值给变量 a")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-7-关系运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-关系运算符"}},[t._v("#")]),t._v(" 3.7.关系运算符")]),t._v(" "),a("p",[t._v("== != > >= < <=")]),t._v(" "),a("h2",{attrs:{id:"_3-8-逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-逻辑运算符"}},[t._v("#")]),t._v(" 3.8.逻辑运算符")]),t._v(" "),a("table",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("作用")]),t._v(" "),a("th",[t._v("说明")])]),t._v(" "),a("tr",[a("td",[t._v("&")]),t._v(" "),a("td",[t._v("逻辑与(且)")]),t._v(" "),a("td",[t._v("并且")])]),t._v(" "),a("tr",[a("td",[t._v("|")]),t._v(" "),a("td",[t._v("逻辑或")]),t._v(" "),a("td",[t._v("或者")])]),t._v(" "),a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("逻辑异或")]),t._v(" "),a("td",[t._v("相同为false，不同为true")])]),t._v(" "),a("tr",[a("td",[t._v("!")]),t._v(" "),a("td",[t._v("逻辑非")]),t._v(" "),a("td",[t._v("取反")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-9-短路逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-短路逻辑运算符"}},[t._v("#")]),t._v(" 3.9.短路逻辑运算符")]),t._v(" "),a("table",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("作用")]),t._v(" "),a("th",[t._v("说明")])]),t._v(" "),a("tr",[a("td",[t._v("&&")]),t._v(" "),a("td",[t._v("短路与")]),t._v(" "),a("td",[t._v("结果和&相同，但是有短路效果")])]),t._v(" "),a("tr",[a("td",[t._v("||")]),t._v(" "),a("td",[t._v("短路或")]),t._v(" "),a("td",[t._v("结果和|相同，但是有短路效果")])])]),t._v(" "),a("h2",{attrs:{id:"_3-10-三元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-三元运算符"}},[t._v("#")]),t._v(" 3.10.三元运算符")]),t._v(" "),a("p",[t._v("格式： 关系表达式 ? 表达式 : 表达式")]),t._v(" "),a("blockquote",[a("p",[t._v("三元表达式的结果必须要用或者输出，否则会报错")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-11-原码-反码-补码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-原码-反码-补码"}},[t._v("#")]),t._v(" 3.11.原码，反码，补码")]),t._v(" "),a("ul",[a("li",[t._v("原码")])]),t._v(" "),a("p",[t._v("十进制数据的二进制表现形式，最左边是符号位，0为正，1为负")]),t._v(" "),a("p",[t._v("一般为8位二进制数，每一位称之为一个bit(比特位), 八位称之为一个字节(最小的存储单位)。 换算为十进制 ，最小值-128，最大值127。如一个ASCII码就是一个字节。")]),t._v(" "),a("p",[t._v("字符是一种表示文本的数据类型，它是由Unicode字符集中的字符组成的。在Java中，字符类型使用char关键字表示，它占用两个字节（16位），可以表示65536个不同的字符。")]),t._v(" "),a("p",[t._v("​ASCII码:一个英文字母(不分大小写)占一个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为8位二进制数。换算为十进制 ，最小值-128，最大值127。如一个ASCII码就是一个字节。")]),t._v(" "),a("p",[t._v("UTF-8编码:一个英文字符等于一个字节，一个中文(含繁体)等于三个字节。中文标点占三个字节，英文标点占一个字节")]),t._v(" "),a("p",[t._v("Unicode编码:一个英文等于两个字节，一个中文(含繁体)等于两个字节。中文标点占两个字节，英文标点占两个字节")]),t._v(" "),a("ul",[a("li",[t._v("反码")])]),t._v(" "),a("p",[t._v("正数的反码是其本身，负数的反码是符号位保持不变，其余位取反")]),t._v(" "),a("blockquote",[a("p",[t._v("为了解决源码不能计算负数的问题而出现的")])]),t._v(" "),a("ul",[a("li",[t._v("补码")])]),t._v(" "),a("p",[t._v("正数的补码是其本身，负数的补码是在其反码的基础+1")])])}),[],!1,null,null,null);a.default=r.exports}}]);