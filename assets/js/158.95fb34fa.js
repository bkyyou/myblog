(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{703:function(s,a,t){"use strict";t.r(a);var e=t(29),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_1-正则表达式介绍和定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-正则表达式介绍和定义"}},[s._v("#")]),s._v(" 1.正则表达式介绍和定义")]),s._v(" "),t("h2",{attrs:{id:"写法介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写法介绍"}},[s._v("#")]),s._v(" 写法介绍")]),s._v(" "),t("ol",[t("li",[s._v("字面量写法\n/pattern/flags   // flags 有 g i m  m表示多行？？？")]),s._v(" "),t("li",[s._v("构造函数写法")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'str'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'g'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"元字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[s._v("#")]),s._v(" 元字符")]),s._v(" "),t("h3",{attrs:{id:"匹配任何字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配任何字符"}},[s._v("#")]),s._v(" . 匹配任何字符")]),s._v(" "),t("h3",{attrs:{id:"位置字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位置字符"}},[s._v("#")]),s._v(" ^ $ 位置字符")]),s._v(" "),t("h3",{attrs:{id:"匹配数字和字母-w-w"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配数字和字母-w-w"}},[s._v("#")]),s._v(" 匹配数字和字母（\\w , \\W）")]),s._v(" "),t("p",[s._v("\\w 匹配数字和字母")]),s._v(" "),t("p",[s._v("\\W 匹配非数字和字母")]),s._v(" "),t("h3",{attrs:{id:"匹配数字和非数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配数字和非数字"}},[s._v("#")]),s._v(" 匹配数字和非数字")]),s._v(" "),t("p",[s._v("\\d  \\D")]),s._v(" "),t("h3",{attrs:{id:"匹配空白字符和非空白字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配空白字符和非空白字符"}},[s._v("#")]),s._v(" 匹配空白字符和非空白字符")]),s._v(" "),t("p",[s._v("\\s  \\S")]),s._v(" "),t("h3",{attrs:{id:"匹配其中的任意字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配其中的任意字符"}},[s._v("#")]),s._v(" [] 匹配其中的任意字符")]),s._v(" "),t("p",[s._v("[0-9a-zA-Z]")]),s._v(" "),t("h3",{attrs:{id:"匹配中文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配中文"}},[s._v("#")]),s._v(" 匹配中文")]),s._v(" "),t("p",[s._v("[\\u4e00-\\u9fa5]")]),s._v(" "),t("h3",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" [^]")]),s._v(" "),t("p",[s._v("[^a-z] 匹配除了 a-z 之外的所有字符")]),s._v(" "),t("h3",{attrs:{id:"匹配一次或多次-至少一次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配一次或多次-至少一次"}},[s._v("#")]),s._v(" + 匹配一次或多次（至少一次）")]),s._v(" "),t("h3",{attrs:{id:"匹配0次或多次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配0次或多次"}},[s._v("#")]),s._v(" * 匹配0次或多次")]),s._v(" "),t("h3",{attrs:{id:"匹配0次或1次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配0次或1次"}},[s._v("#")]),s._v(" ？ 匹配0次或1次")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(http|https):\\/{2}w{3}\\.(baidu|google)\\.(com|cn)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nreg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'https:www.baidu.com'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("RegExp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// baidu")]),s._v("\n\n")])])]),t("h3",{attrs:{id:"分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[s._v("#")]),s._v(" () 分组")]),s._v(" "),t("h3",{attrs:{id:"或者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#或者"}},[s._v("#")]),s._v(" ｜ 或者")]),s._v(" "),t("h3",{attrs:{id:"表示匹配不捕获"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表示匹配不捕获"}},[s._v("#")]),s._v(" ?: 表示匹配不捕获")]),s._v(" "),t("p",[s._v("捕获方法 RegExp.$1")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(http|https):\\/{2}w{3}\\.(?:baidu|google)\\.(com|cn)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nreg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'https:www.baidu.com'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("RegExp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// com")]),s._v("\n")])])]),t("h3",{attrs:{id:"正向预查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向预查"}},[s._v("#")]),s._v(" 正向预查")]),s._v(" "),t("p",[s._v("?=元 表示肯定是元，但是不匹配\n?!元 表示肯定不是元，也不匹配")]),s._v(" "),t("h3",{attrs:{id:"正向肯定预查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向肯定预查"}},[s._v("#")]),s._v(" ?= 正向肯定预查")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'200元'")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("元"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配元之前的数字 (只匹配 200 ， 元不匹配)")]),s._v("\n")])])]),t("h3",{attrs:{id:"正向否定预查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向否定预查"}},[s._v("#")]),s._v(" ?！正向否定预查")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d+(?!元)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配一个或多个数字， 并且匹配的数字之后不是元")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'200元'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  (只匹配 20 ， 0元不匹配)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'200刀'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (只匹配 200)")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d+(?!元｜\\d)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配一个或多个数字， 并且匹配的数字之后不是元也不是数字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'200元'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// test false ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'200刀'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配 200")]),s._v("\n")])])]),t("h3",{attrs:{id:"反向预查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反向预查"}},[s._v("#")]),s._v(" 反向预查")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?<=$)\\d+")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$200'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配 200")]),s._v("\n")])])]),t("h3",{attrs:{id:"反向肯定预查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反向肯定预查"}},[s._v("#")]),s._v(" ?<= 反向肯定预查")]),s._v(" "),t("h3",{attrs:{id:"反向否定预查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反向否定预查"}},[s._v("#")]),s._v(" ?<! 反向否定预查")]),s._v(" "),t("h2",{attrs:{id:"正则实例对象的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则实例对象的方法"}},[s._v("#")]),s._v(" 正则实例对象的方法")]),s._v(" "),t("h3",{attrs:{id:"test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[s._v("#")]),s._v(" test")]),s._v(" "),t("p",[s._v("返回一个布尔值，表示当前模式是否能匹配参数字符串")]),s._v(" "),t("h3",{attrs:{id:"exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[s._v("#")]),s._v(" exec")]),s._v(" "),t("p",[s._v("用来匹配返回的结果，如果匹配，就返回一个数组，数组中的成员都是字符串，否则返回null")]),s._v(" "),t("h2",{attrs:{id:"字符串方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串方法"}},[s._v("#")]),s._v(" 字符串方法")]),s._v(" "),t("h3",{attrs:{id:"match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[s._v("#")]),s._v(" match")]),s._v(" "),t("p",[s._v("对字符串进行正则匹配，返回匹配的结果，否则返回null")]),s._v(" "),t("h3",{attrs:{id:"search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#search"}},[s._v("#")]),s._v(" search")]),s._v(" "),t("p",[s._v("返回第一个满足条件的字符串结果在整个字符串中的位置。如果没有任何匹配，返回 -1")]),s._v(" "),t("h3",{attrs:{id:"replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[s._v("#")]),s._v(" replace")]),s._v(" "),t("p",[s._v("可以替换匹配的值。接受两个参数，第一个知识正则表达式，第二个是替换的内容")]),s._v(" "),t("h2",{attrs:{id:"增则表达式案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增则表达式案例"}},[s._v("#")]),s._v(" 增则表达式案例")]),s._v(" "),t("p",[s._v("https://juejin.cn/post/6844903650389671943")]),s._v(" "),t("h2",{attrs:{id:"的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#的作用"}},[s._v("#")]),s._v(" ？ 的作用")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("匹配 0-1 个")])]),s._v(" "),t("li",[t("p",[s._v("非贪婪模式")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只配置 8 个就停了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d{8,9}？")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])])]),t("h2",{attrs:{id:"非捕获分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非捕获分组"}},[s._v("#")]),s._v(" 非捕获分组")]),s._v(" "),t("p",[s._v("有时候，我们并不需要捕获某个分组的内容，但是又想使用分组的特性。")]),s._v(" "),t("p",[s._v("这个时候就可以使用非捕获组 （?:表达式）， 从而不捕获数据，还能使用分组的功能")]),s._v(" "),t("p",[s._v("例如想要匹配两个字母组成的单词或者四个字母组成的单词就可以使用非捕获分组")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\b(?:\\w{2}|\\w{4})\\b")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v("\n")])])]),t("h2",{attrs:{id:"分组的回溯引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组的回溯引用"}},[s._v("#")]),s._v(" 分组的回溯引用")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("<(\\w+)()<\\/1>")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123<font>提示</bar>abcd'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不匹配")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123<font>提示</font>abcd'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配")]),s._v("\n")])])]),t("h2",{attrs:{id:"正向先行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向先行断言"}},[s._v("#")]),s._v(" 正向先行断言")]),s._v(" "),t("p",[s._v("很多人也称先行断言和后行断言为环视，也有人叫预搜索，其实叫什么无所谓，重要的是知道如何使用他们")]),s._v(" "),t("p",[s._v("先行断言和后行断言总共有四种")]),s._v(" "),t("ol",[t("li",[s._v("正向先行断言")]),s._v(" "),t("li",[s._v("反向先行断言")]),s._v(" "),t("li",[s._v("正向后行断言")]),s._v(" "),t("li",[s._v("反向后行断言")])]),s._v(" "),t("ul",[t("li",[s._v("正向先行断言： (?=表达式)， 指在某个位置向右看，表示所在位置右侧必须能匹配 表达式")])]),s._v(" "),t("p",[s._v("例如： 我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你")]),s._v(" "),t("p",[s._v("如果要取出 喜欢 两个字， 要求这个喜欢后面有你， 这个时候就要这么写： 喜欢(?=你)， 这就是正向先行断言")]),s._v(" "),t("h2",{attrs:{id:"提取包含大小写字母的字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提取包含大小写字母的字符串"}},[s._v("#")]),s._v(" 提取包含大小写字母的字符串")]),s._v(" "),t("p",[s._v("先行断言可以用来判断字符串是否符合特定的规则，例如提取包含至少一个大小写的字母串")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表达式 提取包含至少一个大小写的字母串")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?=.*?[a-z])(?=.*?)[A-Z].+")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个有问题吧")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?=.*?[a-z])(?=.*?[A-Z]).+")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ? 是取消贪婪模式？")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?=.*?[a-z])(?=.*?[A-Z]).*")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 至少匹配")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8, }")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])])]),t("h2",{attrs:{id:"反向先行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反向先行断言"}},[s._v("#")]),s._v(" 反向先行断言")]),s._v(" "),t("p",[s._v("反向先行断言 ?!表达式 的作用是保证右边不能出现某字符")]),s._v(" "),t("p",[s._v("例如：我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你")]),s._v(" "),t("p",[s._v("如果要取出 喜欢 两个字， 要求这个喜欢后面没有你， 这个时候就要这么写： 喜欢(?!你)， 这就是反向先行断言")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("喜欢(?!你)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("gm")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 排除 qq 邮箱")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// @(?!qq)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("[0-9a-zA-Z]+@(?!qq)\\.com")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配标签")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编写正则表达式匹配除 <p> 或 </p> 之外的所有标签")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?!(p)).*(?!<\\/1>)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])])]),t("h2",{attrs:{id:"正向后行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向后行断言"}},[s._v("#")]),s._v(" 正向后行断言")]),s._v(" "),t("p",[s._v("本小结只需要你记住一句话： 先行断言和后行断言只有一个区别， 即先行断言从左往右看，后行断言从右往左看。")]),s._v(" "),t("p",[s._v("正向后行断言： (?<=表达式)， 指在某个位置向左看， 表示所在位置左侧必须能匹配表达式")]),s._v(" "),t("p",[s._v("例如： 如果要取出喜欢两个字，要求喜欢的前面有我， 后边有 你， 这个手就要这么写：(?<=我)喜欢(?=你)")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?<=我)喜欢(?=你)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用正则表达式，匹配王姓同学的名字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("王"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\\"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n")])])]),t("h2",{attrs:{id:"反向后行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反向后行断言"}},[s._v("#")]),s._v(" 反向后行断言")]),s._v(" "),t("p",[s._v("反向后行断言： (?<!表达式)， 指在某个位置向左看，表示所在位置左侧不能匹配表达式")]),s._v(" "),t("p",[s._v("例如： 如果要取出喜欢两个字，要求喜欢的前面没有，后面没有你， 这个是就要写： (?<!我)喜欢(?!你)")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?<!我)喜欢(?!你)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配一个美元符号中的字符")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\\$"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\\$"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\\$"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\\"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("$")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\\$"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);