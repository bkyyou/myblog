(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{534:function(e,t,a){e.exports=a.p+"assets/img/8.1.3f8a98a8.jpg"},535:function(e,t,a){e.exports=a.p+"assets/img/8.2.f257494b.jpg"},536:function(e,t,a){e.exports=a.p+"assets/img/8.3.06a6294b.jpg"},537:function(e,t,a){e.exports=a.p+"assets/img/8.4.2afa2cda.jpg"},538:function(e,t,a){e.exports=a.p+"assets/img/8.5.641bad1d.jpg"},539:function(e,t,a){e.exports=a.p+"assets/img/8.6.133c5d51.jpg"},540:function(e,t,a){e.exports=a.p+"assets/img/8.7.c6461c3d.jpg"},541:function(e,t,a){e.exports=a.p+"assets/img/8.8.3230a623.jpg"},542:function(e,t,a){e.exports=a.p+"assets/img/8.9.09e51f35.jpg"},543:function(e,t,a){e.exports=a.p+"assets/img/8.10.64dfa575.jpg"},544:function(e,t,a){e.exports=a.p+"assets/img/8.11.45794245.jpg"},545:function(e,t,a){e.exports=a.p+"assets/img/8.12.16c6813d.jpg"},546:function(e,t,a){e.exports=a.p+"assets/img/8.13.2ff996f4.jpg"},758:function(e,t,a){"use strict";a.r(t);var s=a(29),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_8-docker网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-docker网络"}},[e._v("#")]),e._v(" 8.Docker网络")]),e._v(" "),s("p",[e._v("铺垫容器编排，集群部署")]),e._v(" "),s("ul",[s("li",[e._v("清空所有环境，方便理解")])]),e._v(" "),s("p",[e._v("容器全部清空\ndocker rm -f $(docker ps -aq)")]),e._v(" "),s("p",[e._v("删除全部镜像\ndocker rmi -f $(docker images -aq)")]),e._v(" "),s("h2",{attrs:{id:"理解-docker0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解-docker0"}},[e._v("#")]),e._v(" 理解 Docker0")]),e._v(" "),s("ol",[s("li",[e._v("清空所有环境")])]),e._v(" "),s("ul",[s("li",[e._v("1.1 测试")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ip addr\n")])])]),s("p",[s("img",{attrs:{src:a(534),alt:"显示ip"}})]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("三个网络")])]),e._v(" "),s("p",[e._v("问题： docker 是如何处理容器")]),e._v(" "),s("p",[s("img",{attrs:{src:a(535),alt:"容器连接？"}})]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 运行 tomcat\ndocker run -d -P --name tomcat01 tomcat\n\n# 查看运行 tomcat 的 ip， 发现容器启动的时候会得到一个 eth0@if117 的地址， docker 分配的\ndocker exec -it tomcat01 ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n116: eth0@if117: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.18.0.3/16 brd 172.18.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\n# 思考：linux 能不能 ping 通容器内部\n[root@VM-0-4-centos ~]# ping 172.18.0.3\nPING 172.18.0.3 (172.18.0.3) 56(84) bytes of data.\n64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.065 ms\n64 bytes from 172.18.0.3: icmp_seq=2 ttl=64 time=0.043 ms\n64 bytes from 172.18.0.3: icmp_seq=3 ttl=64 time=0.042 ms\n# linux 可以 ping 通 docker 容器内部\n")])])]),s("h2",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),s("ol",[s("li",[e._v("我们每启动一个 docker 容器，docker 就会给 docker 容器分配一个ip，我们只要安装了 docker ，就会有一个网卡 docker0。\n桥接模式，使用的技术 evth-pair 技术")])]),e._v(" "),s("ul",[s("li",[e._v("再次测试 ip addr")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(536),alt:"再次测试ip addr"}})]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("在启动一个容器测试,发现又多了一对网卡")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker run -d -P --name tomcat02 tomcat\n")])])]),s("p",[s("img",{attrs:{src:a(537),alt:"再次测试ip addr"}})]),e._v(" "),s("blockquote",[s("p",[e._v("我们发现容器带来的网卡，都是一对对的\nevth-pair 就是一对虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连\n正因为有这个特性，evth-pair 充当一个桥梁，连接各种网络设备\nOpenStac, Docker 容器之间的连接， OVS的连接，都是使用 evth-pair 技术")])]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("测试一下 tomcat02 ping tomcat01")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker exec -it tomcat02 ping 172.18.0.3 \nPING 172.18.0.3 (172.18.0.3) 56(84) bytes of data.\n64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.082 ms\n64 bytes from 172.18.0.3: icmp_seq=2 ttl=64 time=0.052 ms\n64 bytes from 172.18.0.3: icmp_seq=3 ttl=64 time=0.052 ms\n")])])]),s("ul",[s("li",[e._v("结论：容器和容器之后是可以 ping 通的")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(538),alt:"容器之间网络原理"}})]),e._v(" "),s("ul",[s("li",[e._v("结论： tomcat01 和 tomcat02 是公用的一个路由器，docker0。")]),e._v(" "),s("li",[e._v("所有容器再不指定网络的情况下，都是 docker0 路由的，docker 会给我们容器分配一个默认的可用 ip")])]),e._v(" "),s("p",[e._v("255.255.0.1/16")]),e._v(" "),s("p",[e._v("000000.000000.000000.000000")]),e._v(" "),s("p",[e._v("255.255.255.255")]),e._v(" "),s("p",[e._v("255.255.0.0   代表一个网络")]),e._v(" "),s("p",[e._v("存放个数  255 * 255 - 0.0.0.0(回环地址) - 255.255.255.255(最终地址)   大概约等于 65535")]),e._v(" "),s("p",[e._v("255.255.0.1/24 如果是这种代表最后 255 个代表网络范围的")]),e._v(" "),s("ul",[s("li",[e._v("小结")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(539),alt:"容器之间网络原理"}})]),e._v(" "),s("p",[e._v("Docker 使用的是 Linux 的桥接，宿主机中是一个 Docker 容器的网桥 docker0。")]),e._v(" "),s("p",[e._v("Docker 中所有的网络接口都是虚拟的。虚拟的转发效率高")]),e._v(" "),s("p",[e._v("只要容器删除，对应的网桥一对就没了")]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 查看网卡\n[root@VM-0-4-centos ~]# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n9d496db23b85   bridge    bridge    local\nd4b48b153adb   host      host      local\n629b73161751   none      null      local\n[root@VM-0-4-centos ~]# docker network  inspect 9d496db23b85\n")])])]),s("p",[s("img",{attrs:{src:a(540),alt:"容器之间网络原理"}})]),e._v(" "),s("ul",[s("li",[e._v("思考")])]),e._v(" "),s("p",[e._v("我们编写了一个微服务，database url=ip；项目不重启，数据库ip换掉了，我们希望可以处理这个问题，我们可以名字来访问容器？")]),e._v(" "),s("h2",{attrs:{id:"容器互联"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器互联"}},[e._v("#")]),e._v(" 容器互联")]),e._v(" "),s("ul",[s("li",[e._v("直接使用名字不行")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker exec  -it tomcat01 ping tomcat02 \nping: tomcat02: Name or service not known\n")])])]),s("ul",[s("li",[e._v("--link 解决")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 启动，并连接网络\n[root@VM-0-4-centos ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat\n4e54df893ce4da6e19df2a28bfe32ebac46971d4b61526dd61f381dfd1ab8b86\n\n# tomcat03 ping tomcat02\n[root@VM-0-4-centos ~]# docker exec -it tomcat03 ping tomcat02\nPING tomcat02 (172.18.0.4) 56(84) bytes of data.\n64 bytes from tomcat02 (172.18.0.4): icmp_seq=1 ttl=64 time=0.101 ms\n64 bytes from tomcat02 (172.18.0.4): icmp_seq=2 ttl=64 time=0.055 ms\n64 bytes from tomcat02 (172.18.0.4): icmp_seq=3 ttl=64 time=0.055 ms\n\n# 反向可以ping通么\ndocker network --help\n")])])]),s("ul",[s("li",[e._v("探究 inspect")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 查看网卡\n[root@VM-0-4-centos ~]# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n9d496db23b85   bridge    bridge    local\nd4b48b153adb   host      host      local\n629b73161751   none      null      local\n[root@VM-0-4-centos ~]# docker network  inspect 9d496db23b85\n")])])]),s("p",[s("img",{attrs:{src:a(541),alt:"容器之间网络原理"}})]),e._v(" "),s("ul",[s("li",[s("p",[e._v("其实这个 tomcat03 就是在本地配置了 tomcat02 的配置")])]),e._v(" "),s("li",[s("p",[e._v("示范")])])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# hosts  配置之后访问 baidu， 连接到 这个ip\n127.0.0.1   www.baidu.com \n")])])]),s("ul",[s("li",[e._v("查看真实 hosts 配置")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker exec -it tomcat03 cat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.18.0.4      tomcat02 e20a7e22a6c9  # 配置\n172.18.0.5      4e54df893ce4\n")])])]),s("blockquote",[s("p",[e._v("本质探究： --link 就是我们在 hosts 配置增加了一个 172.18.0.4      tomcat02 e20a7e22a6c9")])]),e._v(" "),s("p",[e._v("我们现在使用 docker， 不推荐使用 --link 了。 自定义网络不适用 docker0!!!")]),e._v(" "),s("p",[e._v("docker0 问题： 不支持容器名链接访问")]),e._v(" "),s("h2",{attrs:{id:"自定义网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义网络"}},[e._v("#")]),e._v(" 自定义网络")]),e._v(" "),s("p",[e._v("容器互联")]),e._v(" "),s("h3",{attrs:{id:"查看所有的-docker-网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看所有的-docker-网络"}},[e._v("#")]),e._v(" 查看所有的 docker 网络")]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# bridge 就是 docker0\n[root@VM-0-4-centos ~]# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE   \n9d496db23b85   bridge    bridge    local\nd4b48b153adb   host      host      local\n629b73161751   none      null      local\n")])])]),s("h3",{attrs:{id:"网络模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络模式"}},[e._v("#")]),e._v(" 网络模式")]),e._v(" "),s("ul",[s("li",[e._v("bridge")])]),e._v(" "),s("p",[e._v("桥接模式： 桥接 docker（默认，自己创建网络也使用 bridge 模式）")]),e._v(" "),s("ul",[s("li",[e._v("none")])]),e._v(" "),s("p",[e._v("不配置网络")]),e._v(" "),s("ul",[s("li",[e._v("host")])]),e._v(" "),s("p",[e._v("和宿主机共享网络")]),e._v(" "),s("ul",[s("li",[e._v("container")])]),e._v(" "),s("p",[e._v("容器内可以网络联通 （不建议使用，局限很大）")]),e._v(" "),s("h3",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),s("ol",[s("li",[e._v("删除所有容器，保证环境干净")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker rm -f $(docker ps -aq)\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("自定义网络")])]),e._v(" "),s("ul",[s("li",[e._v("2.1 分析命令")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 我们直接启动命令 --net bridge, 而这个就是我们的 docker0\n# docker run -d -P --name tomcat01 --net bridge tomcat\ndocker run -d -P --name tomcat01  tomcat  # 直接启动会有默认参数 --net bridge\n")])])]),s("ul",[s("li",[e._v("2.2 docker0 特点")])]),e._v(" "),s("p",[e._v("默认，域名不能访问，--link可以打通")]),e._v(" "),s("ul",[s("li",[e._v("2.3 创建网络")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet \n\n# 自定义网络\n# --driver bridge\n# --subnet 192.168.0.0/16  192.168.0.2 - 192.168.255.255\n# --gateway 192.168.0.1 \n\n# 演示\n[root@VM-0-4-centos ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet\n9439177a11dd7269a82fcc6d0403340f332c31007d97de24aaa98b4a305a07b0\n[root@VM-0-4-centos ~]# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n9d496db23b85   bridge    bridge    local\nd4b48b153adb   host      host      local\n9439177a11dd   mynet     bridge    local\n629b73161751   none      null      local\n")])])]),s("ul",[s("li",[e._v("查看自定义网络")])]),e._v(" "),s("p",[e._v("我们自己的网络积极创建好了")]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker network inspect mynet\n")])])]),s("p",[s("img",{attrs:{src:a(542),alt:"查看自定义网络"}})]),e._v(" "),s("ul",[s("li",[e._v("测试")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker run -d -P --name tomcat-net-01 --net mynet tomcat\n015fa36baa493235beee6fa5464f4fb8c5d8897ae7bf1b97eab857c6d9c7c197\n[root@VM-0-4-centos ~]# docker run -d -P --name tomcat-net-02 --net mynet tomcat\nb53af3d80e9c891f4473b4d7159a283714c18ace6eba9bcd1929ada700d0bdeb\n")])])]),s("ul",[s("li",[e._v("查看")])]),e._v(" "),s("p",[e._v("命令")]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker inspect mynet\n\ndocker network inspect mynet\n")])])]),s("p",[s("img",{attrs:{src:a(543),alt:"查看自定义网络"}})]),e._v(" "),s("ul",[s("li",[e._v("再次测试 ping 连接")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker exec -it tomcat-net-01 ping tomcat-net-02\nPING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.\n64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.041 ms\n64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.054 ms\n64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.053 ms\n")])])]),s("blockquote",[s("p",[e._v("现在不实用 --link 也可以 ping 名字了")])]),e._v(" "),s("p",[e._v("我们自定义的网络 docker 都已经帮我们维护好了对应的关系，推荐我们平时这样使用网络")]),e._v(" "),s("p",[e._v("好处：")]),e._v(" "),s("p",[e._v("redis: 不同的集群使用不同的网络，保证集群是安全和健康的")]),e._v(" "),s("p",[e._v("mysql: 不同的集群使用不同的网络，保证集群是安全和健康的")]),e._v(" "),s("h2",{attrs:{id:"网络连通"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络连通"}},[e._v("#")]),e._v(" 网络连通")]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker network connect [options] network container\n")])])]),s("p",[s("img",{attrs:{src:a(544),alt:"网络连通"}})]),e._v(" "),s("p",[s("img",{attrs:{src:a(545),alt:"网络连通"}})]),e._v(" "),s("h3",{attrs:{id:"测试打通-tomcat01-mynet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试打通-tomcat01-mynet"}},[e._v("#")]),e._v(" 测试打通 tomcat01 - mynet")]),e._v(" "),s("ul",[s("li",[e._v("命令")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker network connect mynet tomcat01\n")])])]),s("ul",[s("li",[e._v("效果")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('[root@VM-0-4-centos ~]# docker network connect mynet tomcat01\n[root@VM-0-4-centos ~]# docker network inspect mynet\n[\n    {\n        "Name": "mynet",\n        "Id": "9439177a11dd7269a82fcc6d0403340f332c31007d97de24aaa98b4a305a07b0",\n        "Created": "2021-06-08T09:50:37.156555443+08:00",\n        "Scope": "local",\n        "Driver": "bridge",\n        "EnableIPv6": false,\n        "IPAM": {\n            "Driver": "default",\n            "Options": {},\n            "Config": [\n                {\n                    "Subnet": "192.168.0.0/16",\n                    "Gateway": "192.168.0.1"\n                }\n            ]\n        },\n        "Internal": false,\n        "Attachable": false,\n        "Ingress": false,\n        "ConfigFrom": {\n            "Network": ""\n        },\n        "ConfigOnly": false,\n        "Containers": {\n            "015fa36baa493235beee6fa5464f4fb8c5d8897ae7bf1b97eab857c6d9c7c197": {\n                "Name": "tomcat-net-01",\n                "EndpointID": "15f8c0ae77724f7c1b9cf85e2054e53acda4f1240f00f8cab242a0667f5a3be9",\n                "MacAddress": "02:42:c0:a8:00:02",\n                "IPv4Address": "192.168.0.2/16",\n                "IPv6Address": ""\n            },\n            "108ce0bc7c91e5409267b8a224d1fc389c1223937ea6a4b9c2984e83d921c31f": {\n                "Name": "tomcat01",\n                "EndpointID": "1b83f080b99059cedcb46aff336d2dabb8b514f5031308cc86a9d51ce5cb95db",\n                "MacAddress": "02:42:c0:a8:00:04",\n                "IPv4Address": "192.168.0.4/16",\n                "IPv6Address": ""\n            },\n            "b53af3d80e9c891f4473b4d7159a283714c18ace6eba9bcd1929ada700d0bdeb": {\n                "Name": "tomcat-net-02",\n                "EndpointID": "971311eeeb8652839e4b793d07f8403901246f5a03c49ae390e85bea076070a8",\n                "MacAddress": "02:42:c0:a8:00:03",\n                "IPv4Address": "192.168.0.3/16",\n                "IPv6Address": ""\n            }\n        },\n        "Options": {},\n        "Labels": {}\n    }\n]\n')])])]),s("ul",[s("li",[s("p",[e._v("联通之后就是将 tomcat01  放到了 mynet 网络下？")])]),e._v(" "),s("li",[s("p",[e._v("一个容器两个 ip 地址！！！")])])]),e._v(" "),s("p",[s("img",{attrs:{src:a(546),alt:"网络连通"}})]),e._v(" "),s("h3",{attrs:{id:"再次尝试-ping-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再次尝试-ping-连接"}},[e._v("#")]),e._v(" 再次尝试 ping 连接")]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker exec -it tomcat01 ping tomcat-net-01\nPING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.\n64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.063 ms\n64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.056 ms\n64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.053 ms\n")])])]),s("ul",[s("li",[e._v("结论")])]),e._v(" "),s("p",[e._v("假设要跨网络操作别人，就需要使用 docker network connect 进行联通！！！")]),e._v(" "),s("h2",{attrs:{id:"实战-部署-redis-集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战-部署-redis-集群"}},[e._v("#")]),e._v(" 实战：部署 redis 集群")]),e._v(" "),s("ol",[s("li",[e._v("构建网络")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# docker network create redis --subnet 172.38.0.0/16\n3bb41ccc5128531f6684e6009bd6f9538ac4c38943e61acb5f937803ecd20934\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("shell 脚本")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("for port in $(seq 1 6); \\\ndo \\\nmkdir -p /mydata/redis/node-${port}/conf\ntouch /mydata/redis/node-${port}/conf\ncat << EOF >/mydata/redis/node-${port}/conf/redis.conf\nport 6379\nbind 0.0.0.0\ncluster-enabled ues\ncluster config file nodes.conf\ncluster-node-timeout 5000\ncluster-announce-ip 172.38.0.1${port}\ncluster-announce-port 6379\ncluster-announce-bus-port 16379\nappendonly yes\nEOF\ndone\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[e._v("查看")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd /mydata/redis \n下边有 node-1 node-2 node-3 node-4 node-5 node-6\n")])])]),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@VM-0-4-centos ~]# cd /mydata/\n[root@VM-0-4-centos mydata]# ls\nredis\n[root@VM-0-4-centos mydata]# cd redis/\n[root@VM-0-4-centos redis]# ls\nnode-1  node-2  node-3  node-4  node-5  node-6\n[root@VM-0-4-centos redis]# cd node-1\n[root@VM-0-4-centos node-1]# ls\nconf\n[root@VM-0-4-centos node-1]# cd conf/\n[root@VM-0-4-centos conf]# ls\nredis.conf\n[root@VM-0-4-centos conf]# cat redis.conf \nport 6379\nbind 0.0.0.0\ncluster-enabled ues\ncluster config file nodes.conf\ncluster-node-timeout 5000\ncluster-announce-ip 172.38.0.11\ncluster-announce-port 6379\ncluster-announce-bus-port 16379\nappendonly yes\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[e._v("启动")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run -p 637${port}:6379 -p 1637${port}:16379 --name redis-${port} \\\n-v /mydata/redis/node-${port}/data:/data \\\n-v /mydata/redis/node-${port}/conf/redis.conf:/etc/redis/redis.conf \\\n-d --net redis --ip 172.38.0.1${port} redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf\n\ndocker run -p 6371:6379 -p 16371:16379 --name redis-1 \\\n-v /mydata/redis/node-1/data:/data \\\n-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \\\n-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf\n\ndocker run -p 6372:6379 -p 16372:16379 --name redis-2 \\\n-v /mydata/redis/node-2/data:/data \\\n-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \\\n-d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf\n\ndocker run -p 6373:6379 -p 16373:16379 --name redis-3 \\\n-v /mydata/redis/node-3/data:/data \\\n-v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf \\\n-d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf\n\ndocker run -p 6374:6379 -p 16374:16379 --name redis-4 \\\n-v /mydata/redis/node-4/data:/data \\\n-v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf \\\n-d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf\n\ndocker run -p 6375:6379 -p 16375:16379 --name redis-5 \\\n-v /mydata/redis/node-5/data:/data \\\n-v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf \\\n-d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf\n\ndocker run -p 6376:6379 -p 16376:16379 --name redis-6 \\\n-v /mydata/redis/node-6/data:/data \\\n-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \\\n-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[e._v("创建集群")])]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[e._v("进入容器")])]),e._v(" "),s("p",[e._v("docker exec -it redis-1 /bin/bash bash是找不到")]),e._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker exec -it redis-1 /bin/sh \n")])])]),s("p",[e._v("TODO 不会redis，看不懂")]),e._v(" "),s("p",[e._v("https://www.bilibili.com/video/BV1og4y1q7M4?p=38&spm_id_from=pageDriver")])])}),[],!1,null,null,null);t.default=n.exports}}]);