(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{810:function(v,t,_){"use strict";_.r(t);var a=_(29),o=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"_8-小程序页面路由及页面数据传递"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-小程序页面路由及页面数据传递"}},[v._v("#")]),v._v(" 8.小程序页面路由及页面数据传递")]),v._v(" "),_("p",[v._v("小程序的页面路由都是由框架进行管理")]),v._v(" "),_("h2",{attrs:{id:"页面栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面栈"}},[v._v("#")]),v._v(" 页面栈")]),v._v(" "),_("p",[v._v("框架以栈的形式维护当前所有页面。当发生路由器切换的时候，页面栈的表现如下")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("路由方式")]),v._v(" "),_("th",[v._v("页面栈表现")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("初始化")]),v._v(" "),_("td",[v._v("新页面入栈")])]),v._v(" "),_("tr",[_("td",[v._v("打开新页面")]),v._v(" "),_("td",[v._v("新页面入栈")])]),v._v(" "),_("tr",[_("td",[v._v("页面重定向")]),v._v(" "),_("td",[v._v("当前页面出栈， 新页面入栈")])]),v._v(" "),_("tr",[_("td",[v._v("页面返回")]),v._v(" "),_("td",[v._v("页面不断出栈，  直到目标返回页")])]),v._v(" "),_("tr",[_("td",[v._v("Tab 切换")]),v._v(" "),_("td",[v._v("页面全部出栈， 只留下新的  Tab 页面 TODO 可以重新看看")])]),v._v(" "),_("tr",[_("td",[v._v("重加载")]),v._v(" "),_("td",[v._v("页面全部出栈， 只留下新的页面")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("开发者可以使用 getCurrentPage() 函数获取当前页面栈")])]),v._v(" "),_("h2",{attrs:{id:"路由方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由方式"}},[v._v("#")]),v._v(" 路由方式")]),v._v(" "),_("p",[v._v("对于路由的触发方式以及页面生命周期函数如下")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("路由方式")]),v._v(" "),_("th",[v._v("触发时机")]),v._v(" "),_("th",[v._v("路由前页面")]),v._v(" "),_("th",[v._v("路由后页面")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("初始化")]),v._v(" "),_("td",[v._v("小程序打开的第一个页面")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("onLoad , onShow")])]),v._v(" "),_("tr",[_("td",[v._v("打开新页面")]),v._v(" "),_("td",[v._v('调用API wx.navigateTo, 使用组件 <navigator open-type="navigateTo">')]),v._v(" "),_("td",[v._v("onHide")]),v._v(" "),_("td",[v._v("onLoad, onShow")])]),v._v(" "),_("tr",[_("td",[v._v("页面重定向")]),v._v(" "),_("td",[v._v('调用API wx.redirectTo, 使用组件 <navigator open-type="redirectTo">')]),v._v(" "),_("td",[v._v("onUnload")]),v._v(" "),_("td",[v._v("onLoad, onShow")])]),v._v(" "),_("tr",[_("td",[v._v("页面返回")]),v._v(" "),_("td",[v._v('调用API wx.navigateBack, 使用组件 <navigator open-type="navigateBack">, 用户使用左上角返回按钮')]),v._v(" "),_("td",[v._v("onUnload")]),v._v(" "),_("td",[v._v("onShow")])]),v._v(" "),_("tr",[_("td",[v._v("Tab切换")]),v._v(" "),_("td",[v._v('调用API wx.switchTab, 使用组件 <navigator open-type="switchTab">, 用户切换Tab')]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("各种情况请参考下表")])]),v._v(" "),_("tr",[_("td",[v._v("重启动")]),v._v(" "),_("td",[v._v('调用 wx.reLaunch, 使用 <navigator open-type="reLaunch">')]),v._v(" "),_("td",[v._v("onUnload")]),v._v(" "),_("td",[v._v("onLoad, onShow")])])])]),v._v(" "),_("p",[v._v("Tab 切换对应生命周期（A，B页面分别是 Tabbar , C 页面是从 A  页面打开的页面， D 页面是从 C 页面打开的页面")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("当前页面")]),v._v(" "),_("th",[v._v("路由后页面")]),v._v(" "),_("th",[v._v("触发的声明周期（按顺序）")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("A")]),v._v(" "),_("td",[v._v("A")]),v._v(" "),_("td",[v._v("Nothing happend")])]),v._v(" "),_("tr",[_("td",[v._v("A")]),v._v(" "),_("td",[v._v("B")]),v._v(" "),_("td",[v._v("A.onHide(), B.onLoad(),  B.onShow()")])]),v._v(" "),_("tr",[_("td",[v._v("A")]),v._v(" "),_("td",[v._v("B(再次打开)")]),v._v(" "),_("td",[v._v("A.onHide(),  B.onShow()")])]),v._v(" "),_("tr",[_("td",[v._v("C")]),v._v(" "),_("td",[v._v("A")]),v._v(" "),_("td",[v._v("A.onHide(), C.onUnLoad(),  A.onShow()")])]),v._v(" "),_("tr",[_("td",[v._v("C")]),v._v(" "),_("td",[v._v("B")]),v._v(" "),_("td",[v._v("A.onHide(), C.onUnLoad(), B.onShow(), B.onShow()")])]),v._v(" "),_("tr",[_("td",[v._v("D")]),v._v(" "),_("td",[v._v("B")]),v._v(" "),_("td",[v._v("D.onUnLoad(), C.onUnLoad(), B.onLoad(), B.onShow()")])]),v._v(" "),_("tr",[_("td",[v._v("D(从转发进入 )")]),v._v(" "),_("td",[v._v("A")]),v._v(" "),_("td",[v._v("D.onUnLoad(), A.onLoad(), A.onShow()")])]),v._v(" "),_("tr",[_("td",[v._v("D(从转发进入)")]),v._v(" "),_("td",[v._v("B")]),v._v(" "),_("td",[v._v("D.onUnLoad(), B.onLoad(), B.onShow()")])])])]),v._v(" "),_("p",[v._v("TIPS")]),v._v(" "),_("ul",[_("li",[v._v("navigateTo, redirectTo 只能 打开非 tabBar 页面")]),v._v(" "),_("li",[v._v("switchTab 只能打开 tabBar 页面")]),v._v(" "),_("li",[v._v("reLanuch 可以打开任意页面")]),v._v(" "),_("li",[v._v("页面底部的 tabBar 由页面决定， 即只要定义为 tabBar 的页面，底部都有 tabBar")]),v._v(" "),_("li",[v._v("调用页面路由带有参数可以在目标页面的  onLoad 中 获取")])]),v._v(" "),_("h2",{attrs:{id:"页面数据传递"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面数据传递"}},[v._v("#")]),v._v(" 页面数据传递")]),v._v(" "),_("ul",[_("li",[v._v("可以在跳转链接中拼接参数，在 onLoad 中获取数据")]),v._v(" "),_("li",[v._v("可以在跳转后的页面通过获取页面栈得到数据， 通过遍历  getCurrentPage() 获取数据")]),v._v(" "),_("li",[v._v("可以将数据设置给 app.js 中的全局变量, 通过 getApp() 获取实例挂载获取数据")])])])}),[],!1,null,null,null);t.default=o.exports}}]);