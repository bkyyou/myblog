(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{775:function(t,a,e){"use strict";e.r(a);var n=e(29),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_8-索引介绍及索引分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-索引介绍及索引分类"}},[t._v("#")]),t._v(" 8.索引介绍及索引分类")]),t._v(" "),e("p",[t._v("MySQL 官方对索引的定义为： 索引 （index）是帮助 MySQL 高效获取数据的数据借故偶。 提取句子主干，就可以得到索引的本质： 索引是数据结构")]),t._v(" "),e("h2",{attrs:{id:"_8-1-索引的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-索引的分类"}},[t._v("#")]),t._v(" 8.1 索引的分类")]),t._v(" "),e("ul",[e("li",[t._v("主键索引")])]),t._v(" "),e("p",[t._v("PRIMARY KEY (id)")]),t._v(" "),e("p",[t._v("唯一表示，主键不可重复， 只能有一个列作为主键")]),t._v(" "),e("ul",[e("li",[t._v("唯一索引")])]),t._v(" "),e("p",[t._v("UNIQUE KEY")]),t._v(" "),e("p",[t._v("避免重复的列出现，唯一索引可以有多个，多个列都可以标志为 唯一索引")]),t._v(" "),e("ul",[e("li",[t._v("常规索引")])]),t._v(" "),e("p",[t._v("KEY 或者 index")]),t._v(" "),e("p",[t._v("默认的，index key 关键字来设置")]),t._v(" "),e("ul",[e("li",[t._v("全文索引 fulltext")])]),t._v(" "),e("p",[t._v("在特定的数据引擎下才有， myisam")]),t._v(" "),e("p",[t._v("快速定位数据")]),t._v(" "),e("h2",{attrs:{id:"_8-2-基础语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-基础语法"}},[t._v("#")]),t._v(" 8.2 基础语法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在创建表的时候给字段增加索引")])]),t._v(" "),e("li",[e("p",[t._v("创建完毕后，增加索引")])]),t._v(" "),e("li",[e("p",[t._v("显示所有的索引信息")])])]),t._v(" "),e("div",{staticClass:"language-s extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SHOW INDEX FROM student\n")])])]),e("ul",[e("li",[t._v("增加索引")])]),t._v(" "),e("div",{staticClass:"language-s extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ALTER TABLE student ADD FULLTEXT INDEX studentname (studentname) \n")])])]),e("ul",[e("li",[t._v("EXPLAIN")])]),t._v(" "),e("div",{staticClass:"language-s extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("-- EXPLAIN 分析 sql 执行的状况\nEXPLAIN SELECT * FROM student; -- 非全文索引\n\nEXPLAIN SELECT * FROM student WHERE MATCH(studentname) AGAINST('刘') \n")])])]),e("h2",{attrs:{id:"_8-3-测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-测试"}},[t._v("#")]),t._v(" 8.3 测试")]),t._v(" "),e("div",{staticClass:"language-s extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CREATE TABLE app_user (\n\tid BIGINT(20) UNSIGNED NOT NULL auto_increment,\n\t`name` VARCHAR(50) DEFAULT '' COMMENT '用户昵称',\n\temail VARCHAR(50) NOT NULL COMMENT '用户邮箱',\n\tphone VARCHAR(20) DEFAULT '' COMMENT '手机号',\n\tgender TINYINT(4) UNSIGNED DEFAULT '0' COMMENT '性别（0： 男；1： 女）',\n\t`password` VARCHAR(100) NOT NULL COMMENT '密码',\n\tage TINYINT(4) DEFAULT '0' COMMENT '年龄',\n\tcreate_time DATETIME DEFAULT CURRENT_TIMESTAMP,\n\tupdate_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n\tPRIMARY KEY (id)\n) ENGINE = INNODB DEFAULT CHARSET=utf8 COMMENT='app用户表'\n\n-- 插入 100 万数据 \nDELIMITER $$ -- 写函数之前必须要写，标志\nCREATE FUNCTION mock_data()\nRETURNS INT\nBEGIN \n\tDECLARE num INT DEFAULT 1000000;\n\tDECLARE i INT DEFAULT 0;\n\t\n\tWHILE i < num DO\n\t\tINSERT INTO app_user(`name`, email, phone, gender, `password`, age) \n\t\tVALUES(CONCAT('用户', i), '123@qq.com', CONCAT(18, FLOOR(RAND()*(999999999 - 100000000)+100000000)), FLOOR(RAND()*2)\n\t\t, UUID(), FLOOR(RAND()*100));\n\t\tSET i = i + 1;\n\tEND WHILE;\n\tRETURN i;\nEND;\n\nSELECT mock_data();\n\t\n\n-- id_表名_字段名\n-- CREATE INDEX 索引名 on 表(字段)\nCREATE INDEX id_app_user_name ON app_user(`name`);\n\nSELECT * FROM app_user WHERE `name` = '用户999999';\n")])])]),e("div",{staticClass:"language-s extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 测试 为了写函数\nINSERT INTO app_user(`name`, email, phone, gender, `password`, age) \nVALUES(CONCAT('用户', i), '123@qq.com', CONCAT(18, FLOOR(RAND()*(999999999 - 100000000)+100000000)), FLOOR(RAND()*2)\n, UUID(), FLOOR(RAND()*100))\n\nSELECT FLOOR(RAND()*(999999999 - 100000000)+100000000)\n\nSELECT FLOOR(RAND()*2)\n")])])]),e("blockquote",[e("p",[t._v("索引在小数据量的时候，用户不大，但是在大数据的时候，区别十分明显")])]),t._v(" "),e("h2",{attrs:{id:"_8-3-索引原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-索引原则"}},[t._v("#")]),t._v(" 8.3 索引原则")]),t._v(" "),e("ul",[e("li",[t._v("索引不是越多越好")]),t._v(" "),e("li",[t._v("不要对经常变动的数据加索引")]),t._v(" "),e("li",[t._v("小数据量的表不需要加索引")]),t._v(" "),e("li",[t._v("索引一般加在常用来查询的字段上")])]),t._v(" "),e("h3",{attrs:{id:"索引的数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引的数据结构"}},[t._v("#")]),t._v(" 索引的数据结构")]),t._v(" "),e("p",[t._v("hash 类型的索引")]),t._v(" "),e("p",[t._v("Brtee: InnDB 的默认数据结构")]),t._v(" "),e("p",[t._v("阅读： http://blog.codinglabs.org/articles/theory-of-mysql-index.html")])])}),[],!1,null,null,null);a.default=s.exports}}]);