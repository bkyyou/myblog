(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{557:function(t,e,n){t.exports=n.p+"assets/img/2.1.586c7bb5.png"},772:function(t,e,n){"use strict";n.r(e);var s=n(29),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_4-dql-查询数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-dql-查询数据"}},[t._v("#")]),t._v(" 4.DQL 查询数据")]),t._v(" "),s("p",[t._v("基本的 Select 语句和别名使用")]),t._v(" "),s("h2",{attrs:{id:"_4-1-dql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-dql"}},[t._v("#")]),t._v(" 4.1 DQL")]),t._v(" "),s("p",[t._v("Data Query LANGUAGE 数据查询语言")]),t._v(" "),s("ul",[s("li",[t._v("所有的查询操作都用它 Select")]),t._v(" "),s("li",[t._v("简单的查询，发咋的查询它都会做")]),t._v(" "),s("li",[t._v("数据库中最核心的语言，最重要的语句")]),t._v(" "),s("li",[t._v("使用频率最高的语句")])]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 创建所需的表并插入数据\nDROP TABLE IF EXISTS grade\n\nCREATE TABLE `grade`(\n\t`GradeID` INT(11) NOT NULL AUTO_INCREMENT COMMENT '年级编号',\n\t`GradeName` VARCHAR(50) NOT NULL COMMENT '年级名字',\n\tPRIMARY KEY (`GradeID`)\n) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8\n\nINSERT INTO grade (`GradeID`, `GradeName`) \nVALUES (1, '大一'), (2, '大二'), (3, '大三'), (4, '大四'), (5, '预科班');\n\nDROP TABLE IF EXISTS `result`;\n\nCREATE TABLE `result` (\n\t`StudentNo` INT(4) NOT NULL COMMENT '学号',\n\t`SubjectNo` INT(4) NOT NULL COMMENT '课程编号',\n\t`ExamDate` DATETIME NOT NULL COMMENT '考试日期',\n\t`StudentResult` INT(4) NOT NULL COMMENT '开始成绩',\n\tKEY `SubjectNo` (`SubjectNo`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8\n\nINSERT INTO `result` (`StudentNo`, `SubjectNo`, `ExamDate`, `StudentResult`) \nVALUES (1000, 1, '2021-11-11 16:00:00', '100'), (1000, 1, '2021-11-11 16:00:00', '100'), (1000, 1, '2021-11-11 16:00:00', '100'),(1000, 1, '2021-11-11 16:00:00', '100')\n\ninsert into `result`(`StudentNo`,`SubjectNo`,`ExamDate`,`StudentResult`)\nvalues\n(1000,1,'2013-11-11 16:00:00',85),\n(1000,2,'2013-11-12 16:00:00',70),\n(1000,3,'2013-11-11 09:00:00',68),\n(1000,4,'2013-11-13 16:00:00',98),\n(1000,5,'2013-11-14 16:00:00',58);\n\n\nDROP TABLE IF EXISTS `student`;\nCREATE TABLE `student`(\n\t`StudentNo` INT(4) NOT NULL COMMENT '学号',\n\t`LoginPwd` VARCHAR(24) DEFAULT '123456' COMMENT '登录密码',\n\t`StudentName` VARCHAR(20) DEFAULT NULL COMMENT '学生姓名',\n\t`Sex` VARCHAR(1) DEFAULT NULL COMMENT '性别，取值0或1',\n\t`GradeId` INT(11) DEFAULT NULL COMMENT '年级编号',\n\t`Phone` VARCHAR(11) NOT NULL comment '联系电话，允许为空，即可选输入',\n\t`Address` VARCHAR(255) NOT NULL COMMENT '地址，允许为空，即可选输入',\n\t`BornDate` DATETIME DEFAULT NULL COMMENT '出生日期',\n\t`Email` VARCHAR(50) NOT NULL COMMENT '邮箱账号，允许为空，即可选输入',\n\t`IdentityCard` VARCHAR(18) DEFAULT NULL COMMENT '身份证号',\n\tPRIMARY KEY (`StudentNo`),\n\tUNIQUE KEY `IdentityCard` (`IdentityCard`),\n\tKEY `Email` (`Email`)\n) ENGINE=MYISAM DEFAULT CHARSET=utf8;\n\ninsert into `student` (`StudentNo`,`LoginPwd`,`StudentName`,`Sex`,`GradeId`,`Phone`,`Address`,`BornDate`,`Email`,`IdentityCard`)\nvalues\n(1000,'123456','张伟',0,2,'13800001234','北京朝阳','1980-1-1','text123@qq.com','123456198001011234'),\n(1001,'123456','赵强',1,3,'13800002222','广东深圳','1990-1-1','text111@qq.com','123456199001011233');\n\n\nDROP TABLE IF EXISTS `subject`;\nCREATE TABLE `subject`(\n\t`SubjectNo` INT(11) NOT NULL AUTO_INCREMENT COMMENT '' ,\n\t`SubjectName` VARCHAR(50) DEFAULT NULL COMMENT '',\n\t`ClassHour` INT(4) DEFAULT NULL COMMENT '',\n\t`GradeID` INT(4) DEFAULT NULL COMMENT '',\n\tPRIMARY KEY(`SubjectNo`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8\n\n-- 插入科目数据\ninsert into `subject`(`SubjectNo`,`SubjectName`,`ClassHour`,`GradeID`) values\n(1,'高等数学-1',110,1),\n(2,'高等数学-2',110,2),\n(3,'高等数学-3',100,3),\n(4,'高等数学-4',130,4),\n(5,'C语言-1',110,1),\n(6,'C语言-2',110,2),\n(7,'C语言-3',100,3),\n(8,'C语言-4',130,4),\n(9,'Java程序设计-1',110,1),\n(10,'Java程序设计-2',110,2),\n(11,'Java程序设计-3',100,3),\n(12,'Java程序设计-4',130,4),\n(13,'数据库结构-1',110,1),\n(14,'数据库结构-2',110,2),\n(15,'数据库结构-3',100,3),\n(16,'数据库结构-4',130,4),\n(17,'C#基础',130,1);\n")])])]),s("h3",{attrs:{id:"指定查询字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定查询字段"}},[t._v("#")]),t._v(" 指定查询字段")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 语法\nSELECT 字段 FROM 表\n\n# 查询全部的学生\nSELECT * FROM student;\n\n# 查询学生表的中的指定字段\nSELECT `StudentNo`, `StudentName` FROM student;\n\n# 使用别名，给结果起一个名字 AS\nSELECT `StudentNo` AS 学号, `StudentName` AS 学生姓名 FROM student;\n# 也可以表起别名\nSELECT `StudentNo` AS 学号, `StudentName` AS 学生姓名 FROM student AS s;\n\n# 函数 Concat(a, b)\nSELECT CONCAT('姓名:', StudentName) AS 新名字 FROM student;\n")])])]),s("div",{staticClass:"language-S extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 语法：\nSELECT 字段,... FROM 表\n")])])]),s("blockquote",[s("p",[t._v("有的时候，列名字不是那么的见名知意，我们起别名 AS，  字段名 AS 名字， 表名 AS 别名")])]),t._v(" "),s("h3",{attrs:{id:"去重-distinct"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#去重-distinct"}},[t._v("#")]),t._v(" 去重 distinct")]),t._v(" "),s("ul",[s("li",[t._v("distinct")])]),t._v(" "),s("p",[t._v("作用： 去除 Select 查询出来的结果中重复的数据，重复的数据只显示一条")]),t._v(" "),s("ul",[s("li",[t._v("查询一下有哪些同学参加考试，成绩")])]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 查询全部的考试成绩\nSELECT * FROM `result`;\n\n# 查询有哪些同学参加了考试\nSELECT `StudentNo` FROM result;\n\n# 发现重复数据 去重 distinct\nSELECT DISTINCT `StudentNo` FROM result;\n")])])]),s("h3",{attrs:{id:"查询系统版本-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询系统版本-函数"}},[t._v("#")]),t._v(" 查询系统版本 （函数）")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SELECT VERSION();\n")])])]),s("h3",{attrs:{id:"计算结果-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算结果-表达式"}},[t._v("#")]),t._v(" 计算结果 （表达式）")]),t._v(" "),s("div",{staticClass:"language-S extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SELECT 100*3-1 AS 计算结果;\n")])])]),s("h3",{attrs:{id:"查询自增的步长-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询自增的步长-变量"}},[t._v("#")]),t._v(" 查询自增的步长 （变量）")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SELECT @@auto_increment_increment;\n")])])]),s("h3",{attrs:{id:"学员考试成绩-1-分查看"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学员考试成绩-1-分查看"}},[t._v("#")]),t._v(" 学员考试成绩 + 1 分查看")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SELECT `StudentNo`, `StudentResult` + 1 AS 提分后 FROM result;\n")])])]),s("h3",{attrs:{id:"数据库中的表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库中的表达式"}},[t._v("#")]),t._v(" 数据库中的表达式")]),t._v(" "),s("p",[t._v("文本值，列，null， 函数， 计算表达式，系统变量...")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("select 表达式 from 表;\n")])])]),s("h2",{attrs:{id:"_4-3-where-条件字句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-where-条件字句"}},[t._v("#")]),t._v(" 4.3 where 条件字句")]),t._v(" "),s("p",[t._v("作用：检索数据中符合条件的值")]),t._v(" "),s("blockquote",[s("p",[t._v("搜索的条件由一个或多个表达式组成！结果为布尔值")])]),t._v(" "),s("h3",{attrs:{id:"_4-3-1-逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-逻辑运算符"}},[t._v("#")]),t._v(" 4.3.1 逻辑运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("运算符")]),t._v(" "),s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("and &&")]),t._v(" "),s("td",[t._v("a and b 或者 a&&b")]),t._v(" "),s("td",[t._v("逻辑 与")])]),t._v(" "),s("tr",[s("td",[t._v("or ||")]),t._v(" "),s("td",[t._v("a or b 或者 a||b")]),t._v(" "),s("td",[t._v("逻辑 或")])]),t._v(" "),s("tr",[s("td",[t._v("Not !")]),t._v(" "),s("td",[t._v("a Not b 或者 a!b")]),t._v(" "),s("td",[t._v("逻辑 非， 取反，真为假，假为真")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("尽量使用英文字母")])]),t._v(" "),s("h3",{attrs:{id:"练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 查询 select\nSELECT `StudentNo`, `StudentResult` FROM result;\n\n# 查询考试成绩在 95 - 100 分\nSELECT `StudentNo`, `StudentResult` FROM result WHERE StudentResult >= 95 AND StudentResult <= 100;\n\n# and &&\nSELECT `StudentNo`, `StudentResult` FROM result WHERE StudentResult >= 95 AND StudentResult <= 100;\n\n# 模糊查询 （区间） between and\nSELECT `StudentNo`, `StudentResult` FROM result WHERE StudentResult BETWEEN 95 AND 100;\n\n# 除了 1000 号学生之外的学生成绩\nSELECT `StudentNo`, `StudentResult` FROM result WHERE StudentNo != 1000;\n\n# != not 除了 1000 号学生之外的学生成绩\nSELECT `StudentNo`, `StudentResult` FROM result WHERE NOT StudentNo = 1000;\n")])])]),s("h2",{attrs:{id:"_4-4-模糊查询-比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-模糊查询-比较运算符"}},[t._v("#")]),t._v(" 4.4 模糊查询 比较运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("运算符")]),t._v(" "),s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("IS NULL")]),t._v(" "),s("td",[t._v("a is null")]),t._v(" "),s("td",[t._v("如果操作符为 null，结果为真")])]),t._v(" "),s("tr",[s("td",[t._v("IS NOT NULL")]),t._v(" "),s("td",[t._v("A is not null")]),t._v(" "),s("td",[t._v("如果操作符不为 null， 结果为真")])]),t._v(" "),s("tr",[s("td",[t._v("BETWEEN")]),t._v(" "),s("td",[t._v("a between b and c")]),t._v(" "),s("td",[t._v("如果 a 在 b 和 c 之间，则结果为真")])]),t._v(" "),s("tr",[s("td",[t._v("Like")]),t._v(" "),s("td",[t._v("a like b")]),t._v(" "),s("td",[t._v("SQL 匹配， 如果 a 匹配 b， 则结果为真")])]),t._v(" "),s("tr",[s("td",[t._v("In")]),t._v(" "),s("td",[t._v("a in (a1, a2, a3...)")]),t._v(" "),s("td",[t._v("假设a在 a1，a2，a3。。。 其中的某个一个")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("LINE 配合 % _ 使用，模糊搜索")])]),t._v(" "),s("h3",{attrs:{id:"_4-4-1-练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-练习"}},[t._v("#")]),t._v(" 4.4.1 练习")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# like 操作\n# 查询姓刘的同学 like 结合 %（代表0到任意字符）_(一个字符)\nSELECT `StudentNo`, `StudentName` FROM student WHERE StudentName LIKE '刘%';\n\n# 查询姓刘的同学 后面只有一个字\nSELECT `StudentNo`, `StudentName` FROM student WHERE StudentName LIKE '刘_';\n\n# 查询姓刘的同学 后面只有两个字\nSELECT `StudentNo`, `StudentName` FROM student WHERE StudentName LIKE '刘__';\n\n# 查询名字中有 2 的同学\nSELECT `StudentNo`, `StudentName` FROM student WHERE StudentName LIKE '%2%';\n\n# in 操作\n\n# 查询 1001， 1002， 1003 号学员\nSELECT `StudentNo`, `StudentName` FROM student WHERE StudentNo=1001 OR StudentNo=1002 OR StudentNo=1003;\n## 用 in\nSELECT `StudentNo`, `StudentName` FROM student WHERE StudentNo IN (1001, 1002, 1003);\n\n# 查询在北京的学生\nSELECT `StudentNo`, `StudentName` FROM student WHERE Address LIKE '%北京%';\n\n# 查询地址为空的学生 为空两种情况： null ''\nSELECT `StudentNo`, `StudentName` FROM student WHERE Address IN (NULL, '');\nSELECT `StudentNo`, `StudentName` FROM student WHERE Address='';\nSELECT `StudentNo`, `StudentName` FROM student WHERE Address='' OR Address IS NULL;\n\n# 查询有出生日期的同学 不为空\nSELECT `StudentNo`, `StudentName` FROM student WHERE BornDate IS NOT NULL AND BornDate != '' ;\n\n# 查询没有有出生日期的同学\nSELECT `StudentNo`, `StudentName` FROM student WHERE BornDate IS NULL;\n")])])]),s("blockquote",[s("p",[t._v("IN 具体的一个或者多个值。  具体的值，具体的值，具体的值\nSELECT "),s("code",[t._v("StudentNo")]),t._v(", "),s("code",[t._v("StudentName")]),t._v(" FROM student WHERE Address IN ('%北京%'); 错误的写法")])]),t._v(" "),s("blockquote",[s("p",[t._v("TODO ???  数据库中 NULL == '' 原因我插入数据 为 NULL 可能被转换成 ''(空字符串了), 大概率插入 NULL 变为 ''")])]),t._v(" "),s("h2",{attrs:{id:"_4-4-联表查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-联表查询"}},[t._v("#")]),t._v(" 4.4 联表查询")]),t._v(" "),s("p",[t._v("Join 对比")]),t._v(" "),s("p",[s("img",{attrs:{src:n(557),alt:"Join对比"}})]),t._v(" "),s("ul",[s("li",[t._v("思路")])]),t._v(" "),s("ol",[s("li",[t._v("分析需求，分析查询的字段来自那些表 （连接查询）")]),t._v(" "),s("li",[t._v("确定使用哪种连接查询？ 7 种")])]),t._v(" "),s("p",[t._v("确定交叉点（这两个表中哪个数据是相同的）")]),t._v(" "),s("p",[t._v("判断条件：学生表的 studentno = 成绩表 studentno")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 参加考试的同学 （学号，姓名，科目编号，分数）\nSELECT s.StudentNo, StudentName, SubjectNo, StudentResult \nFROM student As s \nINNER JOIN result AS r\nWHERE s.StudentNo = r.studentNo;\n\n# right join\nSELECT s.StudentNo, StudentName, SubjectNo, StudentResult \nFROM student s \nRIGHT JOIN result AS r\nON s.StudentNo = r.studentNo;\n\n# left join\nSELECT s.StudentNo, StudentName, SubjectNo, StudentResult \nFROM student s \nLEFT JOIN result AS r\nON s.StudentNo = r.studentNo;\n\n# 查询缺考的同学\nSELECT s.StudentNo, StudentName, SubjectNo, StudentResult \nFROM student s \nLEFT JOIN result AS r\nON s.StudentNo = r.studentNo\nWHERE StudentResult IS NULL;\n# right join 没有值\nSELECT s.StudentNo, StudentName, SubjectNo, StudentResult \nFROM student s \nRIGHT JOIN result AS r\nON s.StudentNo = r.studentNo\nWHERE StudentResult IS NULL;\n# inner join 查询也没有值\nSELECT s.StudentNo, StudentName, SubjectNo, StudentResult \nFROM student s \nINNER JOIN result AS r\nON s.StudentNo = r.studentNo\nWHERE StudentResult IS NULL;\n\n# 查询了参加考试的同学信息： 学号，学生姓名，科目名，分数\n## 分析： 表： student result subject， 确定交叉点\nSELECT s.StudentNo, StudentName, SubjectName, StudentResult\nFROM student s\nRIGHT JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN subject sub \nON r.SubjectNo = sub.SubjectNo\n")])])]),s("ul",[s("li",[t._v("join （连接的表） on （查询条件） 连接查询")]),t._v(" "),s("li",[t._v("where 等值查询")])]),t._v(" "),s("h3",{attrs:{id:"区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("操作")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("inner join")]),t._v(" "),s("td",[t._v("如果表中至少有一个匹配，就返回行")])]),t._v(" "),s("tr",[s("td",[t._v("left join")]),t._v(" "),s("td",[t._v("会从左表中返回所有的值，即使右表中没有匹配")])]),t._v(" "),s("tr",[s("td",[t._v("right join")]),t._v(" "),s("td",[t._v("会从右表中返回所有的值，即使右表中没有匹配")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("right join 以右表为基准 "),s("br"),t._v("\nleft join 以左表为基准 "),s("br"),t._v("\ninner join 交叉")])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("我要查询哪些表的数据  select... "),s("br"),t._v("\n从那几个表中查  from 表 XXX join 连接的表 on 交叉条件 "),s("br"),t._v("\n假设存在一种多张表查询，慢慢来，先查询两张表然后再慢慢增加")]),t._v(" "),s("h2",{attrs:{id:"自连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自连接"}},[t._v("#")]),t._v(" 自连接")]),t._v(" "),s("h3",{attrs:{id:"建表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#建表"}},[t._v("#")]),t._v(" 建表")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("CREATE TABLE category (\n\t`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',\n\t`pid` INT(10) NOT NULL COMMENT '父id',\n\t`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',\n\tPRIMARY KEY (`categoryid`)\n) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;\n\nINSERT INTO category(categoryid, pid, categoryName)\nVALUES('2', '1', '信息技术'), ('3', '1', '软件开发'), ('4', '3', '数据库'), ('5', '1', '美术设计'),\n('6', '3', 'web开发'), ('7', '5', 'ps技术'), ('8', '2', '办公软件');\n")])])]),s("p",[t._v("自己的表和自己的表连接，核心： 一张表拆为两张一样的表即可。")]),t._v(" "),s("ul",[s("li",[t._v("父类")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("categoryid")]),t._v(" "),s("th",[t._v("categoryName")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("信息技术")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("软件开发")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[t._v("美术设计")])])])]),t._v(" "),s("ul",[s("li",[t._v("子类")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("pid")]),t._v(" "),s("th",[t._v("categoryid")]),t._v(" "),s("th",[t._v("categoryName")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("数据库")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("办公信息")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("6")]),t._v(" "),s("td",[t._v("web开发")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[t._v("7")]),t._v(" "),s("td",[t._v("ps技术")])])])]),t._v(" "),s("h3",{attrs:{id:"练习-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习-2"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),s("ul",[s("li",[t._v("操作描述：")])]),t._v(" "),s("p",[t._v("查询父类对应的子类关系")]),t._v(" "),s("ul",[s("li",[t._v("想要的结果")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("父类")]),t._v(" "),s("th",[t._v("子类")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("信息技术")]),t._v(" "),s("td",[t._v("办公信息")])]),t._v(" "),s("tr",[s("td",[t._v("软件开发")]),t._v(" "),s("td",[t._v("数据库")])]),t._v(" "),s("tr",[s("td",[t._v("软件开发")]),t._v(" "),s("td",[t._v("web开发")])]),t._v(" "),s("tr",[s("td",[t._v("美术设计")]),t._v(" "),s("td",[t._v("ps技术")])])])]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 查询父子信息: 把一张表看成两个一模一样的表\nSELECT a.categoryName AS '父栏目', b.categoryName AS '子栏目'\nFROM category AS a, category AS b\nWHERE a.`categoryid` = b.`pid`\n\n# 查询学员所属的年级（学号，学生的姓名，年级名称）\nSELECT StudentNo, StudentName, GradeName, s.Gradeid\nFROM student s\nLEFT JOIN grade g\nON s.Gradeid = g.GradeID;\n\n# 查询科目所属的年级\nSELECT SubjectName, GradeName\nFROM subject s\nINNER JOIN grade g\nON s.Gradeid = g.GradeID;\n\n# 查询了参加 高等数学-1 考试的同学信息： 学号，学生姓名，科目名，分数\nSELECT s.StudentNo, StudentName, sub.SubjectName, StudentResult\nFROM student s\nRIGHT JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN subject sub\nON r.SubjectNo = sub.SubjectNo\nWHERE sub.SubjectName = '高等数学-4';\n## 错误的写法 on 后边加了判断条件 不行 TODO ？？？\nSELECT s.StudentNo, StudentName, sub.SubjectName, StudentResult\nFROM student s\nRIGHT JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN subject sub\nON sub.SubjectName = '高等数学-1';\n")])])]),s("blockquote",[s("p",[t._v("连表查询必须要有一个连接条件！！！")])]),t._v(" "),s("blockquote",[s("p",[t._v("没有的话 where 和 on 判断好像变成了 赋值")])]),t._v(" "),s("h2",{attrs:{id:"select-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select-语法"}},[t._v("#")]),t._v(" select 语法")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SELECT [ALL | DISTINCT]\n{* | table.* | [table.field1[as alias1] [, table.field2[as alias2]][,...]]}\nFROM table_name [as table_alias]\n  [left | right | inner join table_name2 ] -- 联合查询\n  [WHERE...] -- 指定结果需满足的条件\n  [GROUP BY ...] --指定结果按照哪几个字段来分组\n  [HAVING] -- 过滤分组的记录必须满足的次要条件\n  [OROER BY...]  -- 指定查询记录按一个或多个条件排序\n  [LIMIT {[offset,] row_count | row_countOFFSET offset}];\n  -- 指定查询的记录从哪条至哪条\n")])])]),s("h2",{attrs:{id:"_4-5-分页"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-分页"}},[t._v("#")]),t._v(" 4.5 分页")]),t._v(" "),s("p",[t._v("分页 limit 和排序 order by")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# LIMIT 0,5 这是 1 - 5 条数据\n# LIMIT 1,5 这是 2 - 6 条数据\nSELECT s.StudentNo, StudentName, sub.SubjectName, StudentResult\nFROM student s\nRIGHT JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN subject sub\nON r.SubjectNo = sub.SubjectNo\nWHERE sub.SubjectName = '高等数学-1'\nORDER BY StudentResult DESC\nLIMIT 0,2\n\n# 第一页 limit 0 5\n# 第二页 limit 5 5\n# 第三页 limit 10 5\n# 第n页 limit 10 5 （n-1）* pageSize\n\n# pageSize  页面大小 （数量）\n# (n-1) * pageSize  起始值\n# n  当前页\n# 页面总数 / 页面大小 = 总页数\n\n")])])]),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("limit(查询起始下标, ageSize)\n")])])]),s("h3",{attrs:{id:"练习-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习-3"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 查询 Java第一学年 课程成绩排名前十的学生，并且分数要大于 80 的学生信息 （学号，姓名，课程名称，分数）\nSELECT s.StudentNo, StudentName, SubjectName, StudentResult\nFROM student s\nINNER JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN `subject` sub\nON r.SubjectNo = sub.SubjectNo\nWHERE sub.SubjectNo = 9\nORDER BY StudentResult DESC\nLIMIT 10;\n# 大于80\nSELECT s.StudentNo, StudentName, SubjectName, StudentResult\nFROM student s\nINNER JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN `subject` sub\nON r.SubjectNo = sub.SubjectNo\nWHERE sub.SubjectNo = 9 AND StudentResult>=80\nORDER BY StudentResult DESC\nLIMIT 10;\n")])])]),s("h2",{attrs:{id:"_4-6-排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-排序"}},[t._v("#")]),t._v(" 4.6 排序")]),t._v(" "),s("p",[t._v("排序： 升序 ASC 降序 DESC")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 降序排序\nSELECT s.StudentNo, StudentName, sub.SubjectName, StudentResult\nFROM student s\nRIGHT JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN subject sub\nON r.SubjectNo = sub.SubjectNo\nWHERE sub.SubjectName = '高等数学-1'\nORDER BY StudentResult DESC\n")])])]),s("h2",{attrs:{id:"_4-6-子查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-子查询"}},[t._v("#")]),t._v(" 4.6 子查询")]),t._v(" "),s("p",[t._v("where 这个值是计算出来的")]),t._v(" "),s("ul",[s("li",[t._v("本质：在 where 语句中嵌套一个子查询语句")])]),t._v(" "),s("h3",{attrs:{id:"练习-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习-4"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 查询 高等数学-1 的所有考试结果 （学号，姓名，科目编号，成绩）， 降序排序\n# 方式一: 使用连接查询\nSELECT s.StudentNo, StudentName, r.SubjectNo, StudentResult, SubjectName\nFROM student s\nINNER JOIN result r\nON s.StudentNo = r.StudentNo\nINNER JOIN `subject` sub\nON r.SubjectNo = sub.SubjectNo\nWHERE SubjectName='高等数学-1'\nORDER BY StudentResult DESC\n\n# 查询 高等数学-1 的所有考试结果 （学号，科目编号，成绩）， 降序排序\n# 方式二: 使用子查询 由里及外\nSELECT StudentNo, SubjectNo, StudentResult\nFROM result\nWHERE SubjectNo = (\n\tSELECT SubjectNo from `subject` WHERE SubjectName='高等数学-1'\n)\n# 查询所有数据库结构-1 的学生学号\n\n# 分数不小于 80 分的学号 和 姓名\n# 连表查询\nSELECT s.StudentNo, StudentName, StudentResult\nFROM student s\nRIGHT JOIN result r \nON s.StudentNo = r.StudentNo\nWHERE StudentResult>80;\n# 去重\nSELECT DISTINCT s.StudentNo, StudentName, StudentResult\nFROM student s\nRIGHT JOIN result r \nON s.StudentNo = r.StudentNo\nWHERE StudentResult>80;\n# 基础上再增加一个科目 高等数据-1\n# 方式一\nSELECT DISTINCT s.StudentNo, StudentName, StudentResult\nFROM student s\nRIGHT JOIN result r \nON s.StudentNo = r.StudentNo\nWHERE StudentResult>80 AND SubjectNo = (\n\tSELECT SubjectNo FROM `subject` WHERE SubjectName = '高等数学-1'\n);\n# 方式二 由里及外\n# 查询课程为 高等数据-1 且分数不小于 80 的同学的学号和姓名\nSELECT StudentNo, StudentName \nFROM student\nWHERE StudentNo IN (\n\tSELECT StudentNo FROM result WHERE StudentResult > 80 AND SubjectNo = (\n\t\tSELECT SubjectNo FROM `subject` WHERE SubjectName = '高等数学-1'\n\t)\n)\n# 方式三\n# 两个连表查询\n\n# 查询 c语言-1 前五名同学的成绩信息 （学号，姓名，分数）\nSELECT s.StudentNo, StudentName, StudentResult \nFROM student s \nINNER JOIN result r \nON s.StudentNo = r.StudentNo \nWHERE SubjectNo = (\n\tSELECT SubjectNo FROM `subject` WHERE SubjectName = '高等数学-1'\n)\nORDER BY StudentResult DESC\nLIMIT 3\n")])])]),s("h2",{attrs:{id:"分组-group-by"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组-group-by"}},[t._v("#")]),t._v(" 分组 group by")]),t._v(" "),s("div",{staticClass:"language-s extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-- 查询不同课程的平均分，最高分，最低分\n-- 核心：根据不同的课程分组\nSELECT SubjectName, AVG(studentresult), MAX(studentresult), MIN(studentresult)\nFROM result r\nINNER JOIN `subject` s\nON r.SubjectNo = s.SubjectNo\nGROUP BY r.subjectno\n\n\nSELECT SubjectName, AVG(studentresult), MAX(studentresult), MIN(studentresult)\nFROM result r\nINNER JOIN `subject` s\nON r.SubjectNo = s.SubjectNo\nGROUP BY r.subjectno\nHAVING AVG(studentresult) > 80 # [HAVING] -- 过滤分组的记录必须满足的次要条件\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);